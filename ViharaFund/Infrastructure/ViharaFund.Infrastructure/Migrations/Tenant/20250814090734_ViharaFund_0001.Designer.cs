// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ViharaFund.Infrastructure.Data;

#nullable disable

namespace ViharaFund.Infrastructure.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20250814090734_ViharaFund_0001")]
    partial class ViharaFund_0001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.AppSetting", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("AppSetting", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CompaignImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasEndDate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignCategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Campaign", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.CampaignCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampaignCategory", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyType", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DonorId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Donation", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.DonationExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TaskPaymentId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("DonationExpense", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequestedAsUnknownDonor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Donor", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroupDetailEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.GroupUser", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUser", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignRoleGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EstimatedTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobCardNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignRoleGroupId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCard", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApproverUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalLevelId");

                    b.HasIndex("ApproverUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardApproval", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardApprovalLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AssignRoleGroupId")
                        .HasColumnType("int");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignRoleGroupId");

                    b.ToTable("JobCardApprovalLevel", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardComment", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ReleaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ReleasedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardFundRequest", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequestApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApproverId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FundRequestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FundRequestId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardFundRequestApproval", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequestComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardFundRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardFundRequestId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardFundRequestComment", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequestRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentProofUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseMethod")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardFundRequestRelease", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EstimatedTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardHistory", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardId")
                        .HasColumnType("int");

                    b.Property<string>("TaskNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardTask", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTaskAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardTaskId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardTaskAttachment", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("JobCardTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardTaskId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardTaskComment", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTaskPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCardTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaidById")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobCardTaskId");

                    b.HasIndex("PaidById");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JobCardTaskPayment", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Campaign", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.CampaignCategory", "CampaignCategory")
                        .WithMany("Campaigns")
                        .HasForeignKey("CampaignCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedCampaigns")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.CurrencyType", "CurrencyType")
                        .WithMany("Campaigns")
                        .HasForeignKey("CurrencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedCampaigns")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CampaignCategory");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CurrencyType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Donation", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Campaign", "Campaign")
                        .WithMany("Donations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedDonations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedDonations")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Campaign");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Donor");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.DonationExpense", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedDonationExpenses")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCardTaskPayment", "TaskPayment")
                        .WithMany("DonationExpenses")
                        .HasForeignKey("TaskPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedDonationExpenses")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("TaskPayment");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Donor", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedDonors")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedDonors")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Group", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Role", "Role")
                        .WithMany("Groups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedGroups")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.GroupUser", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCard", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Role", "AssignRoleGroup")
                        .WithMany("AssignedJobCards")
                        .HasForeignKey("AssignRoleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Campaign", "Campaign")
                        .WithMany("JobCards")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCards")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCards")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignRoleGroup");

                    b.Navigation("Campaign");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardApproval", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCardApprovalLevel", "ApprovalLevel")
                        .WithMany("JobCardApprovals")
                        .HasForeignKey("ApprovalLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "ApprovedUser")
                        .WithMany("JobCardApprovals")
                        .HasForeignKey("ApproverUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardApprovals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCard", "JobCard")
                        .WithMany("JobCardApprovals")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardApprovals")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovalLevel");

                    b.Navigation("ApprovedUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCard");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardApprovalLevel", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Role", "AssignRoleGroup")
                        .WithMany("JobCardApprovalLevels")
                        .HasForeignKey("AssignRoleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignRoleGroup");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardComment", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardComments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCard", "JobCard")
                        .WithMany("JobCardComments")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardComments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCard");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequest", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardFundRequests")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCard", "JobCard")
                        .WithMany("JobCardFundRequests")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "RequestedBy")
                        .WithMany("JobCardFundRequests")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardFundRequests")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCard");

                    b.Navigation("RequestedBy");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequestApproval", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "Approver")
                        .WithMany("JobCardFundRequestApprovals")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardFundRequestApprovals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCardFundRequest", "JobCardFundRequest")
                        .WithMany("JobCardFundRequestApprovals")
                        .HasForeignKey("FundRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardFundRequestApprovals")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Approver");

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCardFundRequest");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequestComment", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardFundRequestComments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCardFundRequest", "JobCardFundRequest")
                        .WithMany("JobCardFundRequestComments")
                        .HasForeignKey("JobCardFundRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardFundRequestComments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCardFundRequest");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequestRelease", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardFundRequestReleases")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCard", "JobCard")
                        .WithMany("JobCardFundRequestReleases")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardFundRequestReleases")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCard");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardHistory", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardHistories")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCard", "JobCard")
                        .WithMany("JobCardHistories")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardHistories")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCard");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTask", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardTasks")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCard", "JobCard")
                        .WithMany("JobCardTasks")
                        .HasForeignKey("JobCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardTasks")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCard");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTaskAttachment", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardTaskAttachments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCardTask", "JobTask")
                        .WithMany("JobCardTaskAttachments")
                        .HasForeignKey("JobCardTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardTaskAttachments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobTask");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTaskComment", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardTaskComments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCardTask", "JobCardTask")
                        .WithMany("JobCardTaskComments")
                        .HasForeignKey("JobCardTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardTaskComments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCardTask");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTaskPayment", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedJobCardTaskPayments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.JobCardTask", "JobCardTask")
                        .WithMany("JobCardTaskPayments")
                        .HasForeignKey("JobCardTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "PaidByUser")
                        .WithMany("JobCardTaskPayments")
                        .HasForeignKey("PaidById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedJobCardTaskPayments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobCardTask");

                    b.Navigation("PaidByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.User", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "UpdatedByUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.UserRole", b =>
                {
                    b.HasOne("ViharaFund.Domain.Entities.Tenant.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ViharaFund.Domain.Entities.Tenant.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Campaign", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("JobCards");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.CampaignCategory", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.CurrencyType", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Donor", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Group", b =>
                {
                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCard", b =>
                {
                    b.Navigation("JobCardApprovals");

                    b.Navigation("JobCardComments");

                    b.Navigation("JobCardFundRequestReleases");

                    b.Navigation("JobCardFundRequests");

                    b.Navigation("JobCardHistories");

                    b.Navigation("JobCardTasks");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardApprovalLevel", b =>
                {
                    b.Navigation("JobCardApprovals");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardFundRequest", b =>
                {
                    b.Navigation("JobCardFundRequestApprovals");

                    b.Navigation("JobCardFundRequestComments");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTask", b =>
                {
                    b.Navigation("JobCardTaskAttachments");

                    b.Navigation("JobCardTaskComments");

                    b.Navigation("JobCardTaskPayments");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.JobCardTaskPayment", b =>
                {
                    b.Navigation("DonationExpenses");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.Role", b =>
                {
                    b.Navigation("AssignedJobCards");

                    b.Navigation("Groups");

                    b.Navigation("JobCardApprovalLevels");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ViharaFund.Domain.Entities.Tenant.User", b =>
                {
                    b.Navigation("CreatedCampaigns");

                    b.Navigation("CreatedDonationExpenses");

                    b.Navigation("CreatedDonations");

                    b.Navigation("CreatedDonors");

                    b.Navigation("CreatedGroups");

                    b.Navigation("CreatedJobCardApprovals");

                    b.Navigation("CreatedJobCardComments");

                    b.Navigation("CreatedJobCardFundRequestApprovals");

                    b.Navigation("CreatedJobCardFundRequestComments");

                    b.Navigation("CreatedJobCardFundRequestReleases");

                    b.Navigation("CreatedJobCardFundRequests");

                    b.Navigation("CreatedJobCardHistories");

                    b.Navigation("CreatedJobCardTaskAttachments");

                    b.Navigation("CreatedJobCardTaskComments");

                    b.Navigation("CreatedJobCardTaskPayments");

                    b.Navigation("CreatedJobCardTasks");

                    b.Navigation("CreatedJobCards");

                    b.Navigation("CreatedUsers");

                    b.Navigation("GroupUsers");

                    b.Navigation("JobCardApprovals");

                    b.Navigation("JobCardFundRequestApprovals");

                    b.Navigation("JobCardFundRequests");

                    b.Navigation("JobCardTaskPayments");

                    b.Navigation("UpdatedCampaigns");

                    b.Navigation("UpdatedDonationExpenses");

                    b.Navigation("UpdatedDonations");

                    b.Navigation("UpdatedDonors");

                    b.Navigation("UpdatedGroups");

                    b.Navigation("UpdatedJobCardApprovals");

                    b.Navigation("UpdatedJobCardComments");

                    b.Navigation("UpdatedJobCardFundRequestApprovals");

                    b.Navigation("UpdatedJobCardFundRequestComments");

                    b.Navigation("UpdatedJobCardFundRequestReleases");

                    b.Navigation("UpdatedJobCardFundRequests");

                    b.Navigation("UpdatedJobCardHistories");

                    b.Navigation("UpdatedJobCardTaskAttachments");

                    b.Navigation("UpdatedJobCardTaskComments");

                    b.Navigation("UpdatedJobCardTaskPayments");

                    b.Navigation("UpdatedJobCardTasks");

                    b.Navigation("UpdatedJobCards");

                    b.Navigation("UpdatedUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
