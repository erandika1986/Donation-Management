@page "/campaigns"
@using MudBlazor
@using ViharaFund.Admin.Common
@using ViharaFund.Admin.Helper
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Application.DTOs.Donation
@using ViharaFund.Shared.DTOs.Campaign
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>Campaign Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">

    <!-- Page Header -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <div class="d-flex justify-space-between align-center flex-wrap">
            <div>
                <MudText Typo="Typo.h4" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Campaign" Class="mr-3" />
                    Campaign Management
                </MudText>
                <MudText Typo="Typo.body1" Class="mud-text-secondary">
                    Create, manage and track your fundraising campaigns
                </MudText>
            </div>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenCreateNewCampaignModal"
                       Class="mt-2 mt-sm-0">
                New Campaign
            </MudButton>
        </div>
    </MudPaper>

    <!-- Statistics Cards -->
    <MudGrid Class="mb-6">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4 text-center mud-height-full" Style="border-radius: 15px; background: rgba(255,255,255,0.9); backdrop-filter: blur(10px);">
                <MudText Typo="Typo.h4" Color="Color.Success" Class="mb-2">@CampaignsSummary.Statistics.ActiveCampaign</MudText>
                <MudText Typo="Typo.caption" Style="text-transform: uppercase; letter-spacing: 1px;">Active Campaigns</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4 text-center mud-height-full" Style="border-radius: 15px; background: rgba(255,255,255,0.9); backdrop-filter: blur(10px);">
                <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2">@CampaignsSummary.CurrencyType @CampaignsSummary.Statistics.TotalRaised</MudText>
                <MudText Typo="Typo.caption" Style="text-transform: uppercase; letter-spacing: 1px;">Total Raised</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4 text-center mud-height-full" Style="border-radius: 15px; background: rgba(255,255,255,0.9); backdrop-filter: blur(10px);">
                <MudText Typo="Typo.h4" Color="Color.Warning" Class="mb-2">@CampaignsSummary.CurrencyType @CampaignsSummary.Statistics.ThisMonth</MudText>
                <MudText Typo="Typo.caption" Style="text-transform: uppercase; letter-spacing: 1px;">This Month</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="4" Class="pa-4 text-center mud-height-full" Style="border-radius: 15px; background: rgba(255,255,255,0.9); backdrop-filter: blur(10px);">
                <MudText Typo="Typo.h4" Color="Color.Secondary" Class="mb-2">@CampaignsSummary.Statistics.TotalDonors</MudText>
                <MudText Typo="Typo.caption" Style="text-transform: uppercase; letter-spacing: 1px;">Total Donors</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Main Content -->
    <MudPaper Elevation="8" Class="pa-6" Style="background: rgba(255,255,255,0.95); backdrop-filter: blur(15px); border-radius: 20px;">
        <!-- Filter Bar -->
        <MudGrid Class="mb-6" AlignItems="Center">
            <MudItem xs="12" md="3">
                <MudSelect T="DropDownDTO" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" Label="Status" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedStatus" ValueChanged="@StatusChanged">
                    @foreach (var status in Statuses)
                    {
                        <MudSelectItem T="DropDownDTO" Value="@status">@status.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudSelect T="DropDownDTO" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" Label="Category" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedCategory" ValueChanged="@CategoryChanged">
                    @foreach (var category in Categories)
                    {
                        <MudSelectItem T="DropDownDTO" Value="@category">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string"
                              ValueChanged="@(s => OnSearchAsync(s))"
                              Label="Search campaigns"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" />
            </MudItem>
        </MudGrid>

        <!-- Campaigns Grid -->
        <MudGrid>
            @foreach (var campaign in CampaignsSummary.Campaigns)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Elevation="6" Style="border-radius: 15px; height: 100%; transition: all 0.3s ease;" Class="campaign-card">
                        <!-- Card Header -->
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Class="mb-2">@campaign.Title</MudText>
                                <MudGrid AlignItems="Center" Justify="Justify.SpaceBetween">
                                    <MudItem>
                                        <MudChip T="string" Color="@GetStatusColor(campaign.Status)" Size="Size.Small" Text="@campaign.Status.ToUpper()" />
                                    </MudItem>
                                    <MudItem>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@campaign.StartDate.ToString("MMM d, yyyy") - @(@campaign.EndDate.HasValue? @campaign.EndDate.Value.ToString("MMM d, yyyy") : "")</MudText>
                                    </MudItem>
                                </MudGrid>
                            </CardHeaderContent>
                        </MudCardHeader>

                        <!-- Progress Section -->
                        <MudCardContent>
                            <MudGrid AlignItems="Center" Justify="Justify.SpaceBetween" Class="mb-3">
                                <MudItem>
                                    <MudText Typo="Typo.h5" Color="Color.Success">@CampaignsSummary.CurrencyType @campaign.RaisedAmount.ToString("N0")</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">of @CampaignsSummary.CurrencyType @campaign.TargetAmount.ToString("N0")</MudText>
                                </MudItem>
                            </MudGrid>

                            <MudProgressLinear Color="Color.Success"
                                               Value="@campaign.ProgressPercentage"
                                               Size="Size.Medium"
                                               Class="mb-3"
                                               Style="height: 8px; border-radius: 10px;" />

                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@campaign.ProgressPercentage% Complete</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@campaign.DaysLeft days left</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@campaign.DonorCount donors</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>

                        <!-- Card Actions -->
                        <MudCardActions Class="pa-4 d-flex flex-wrap align-items-center" Style="background: #fafafa;">
                            <MudTooltip Text="Add New Donation" Color="Color.Secondary" Placement="Placement.Top">
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Secondary"
                                           Size="Size.Small"
                                           StartIcon="@Icons.Material.Filled.AttachMoney"
                                           Class="me-2 mb-2"
                                           OnClick="@(() => OpenAddDonationModel(campaign))">
                                    Add
                                </MudButton>
                                                 </MudTooltip>

                            <MudSpacer />
                            @if (campaign.Status == "Draft")
                            {
                                <MudTooltip Text="Edit" Color="Color.Warning" Placement="Placement.Top">
                                    <MudIconButton 
                                        Variant="Variant.Filled" 
                                        Icon="@Icons.Material.Filled.Edit" 
                                        Size="Size.Small" 
                                        Color="Color.Warning"
                                        Class="m-1"
                                        OnClick="@(() => OpenEditCampaignModel(campaign))"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Launch" Color="Color.Primary" Placement="Placement.Top">
                                    <MudIconButton 
                                        Variant="Variant.Filled" 
                                        Icon="@Icons.Material.Filled.Launch" 
                                        Size="Size.Small" 
                                        Color="Color.Primary"
                                        Class="m-1" 
                                        OnClick="@(() => DeleteCampaign(campaign))"></MudIconButton>
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="Edit" Color="Color.Warning" Placement="Placement.Top">
                                    <MudIconButton 
                                        Variant="Variant.Filled" 
                                        Icon="@Icons.Material.Filled.Edit" 
                                        Size="Size.Small" 
                                        Color="Color.Warning"
                                        Class="m-1"
                                        OnClick="@(() => OpenEditCampaignModel(campaign))"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Share" Color="Color.Info" Placement="Placement.Top">
                                    <MudIconButton 
                                        Variant="Variant.Filled" 
                                        Icon="@Icons.Material.Filled.Share" 
                                        Size="Size.Small" 
                                        Color="Color.Info"
                                        Class="m-1"
                                        OnClick="@(() => ShareCampaign(campaign))"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="View Details" Color="Color.Primary" Placement="Placement.Top">
                                    <MudIconButton 
                                        Variant="Variant.Filled" 
                                        Icon="@Icons.Material.Filled.Visibility" 
                                        Size="Size.Small" 
                                        Color="Color.Primary" 
                                        Class="m-1"
                                        OnClick="@(() => OpenViewCampaignModel(campaign))"></MudIconButton>
                                </MudTooltip>
                            }
                            <MudTooltip Text="Delete" Color="Color.Error" Placement="Placement.Top">
                                <MudIconButton 
                                    Variant="Variant.Filled" 
                                    Icon="@Icons.Material.Filled.Delete" 
                                    Size="Size.Small" 
                                    Color="Color.Error" 
                                    Class="m-1" 
                                    OnClick="@(() => DeleteCampaign(campaign))"></MudIconButton>
                            </MudTooltip>
                        </MudCardActions>

                        @code {
                            private void ShowCampaignInfo(CampaignSummaryDTO campaign)
                            {
                                Snackbar.Add($"Campaign: {campaign.Title}", Severity.Info);
                            }
                        }
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        <MudPagination Page="@CurrentPage"
                       PageSize="@PageSize"
                       TotalItems="@CampaignsSummary.TotalPages"
                       OnPageChanged="OnPageChanged"
                       HideNextPrev="false" />
    </MudPaper>
</MudContainer>

<style>
    .campaign-card:hover {
        transform: translateY(-8px) !important;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15) !important;
    }

    .mud-paper {
        transition: all 0.3s ease;
    }

        .mud-paper:hover {
            transform: translateY(-2px);
        }
</style>

@code {
    public CampaignsSummaryDTO CampaignsSummary { get; set; } = new();


    private string selectedStatus = "All";
    private string selectedCategory = "All";

    private CampaignMasterDataDTO CampaignMasterData = new();
    // private Campaign newCampaign = new();
    private string searchTerm = "";

    private IEnumerable<DropDownDTO> Statuses = new List<DropDownDTO>();
    private DropDownDTO SelectedStatus = new DropDownDTO();

    private IEnumerable<DropDownDTO> Categories = new List<DropDownDTO>();
    private DropDownDTO SelectedCategory = new DropDownDTO();


    private int CurrentPage = 1;
    private int PageSize = 10;

    // Separate nullable DateTime properties for the date pickers
    // private DateTime? startDate = DateTime.Today;
    // private DateTime? endDate = DateTime.Today.AddMonths(3);

    // private DialogOptions dialogOptions = new()
    // {
    //     MaxWidth = MaxWidth.Medium,
    //     FullWidth = true,
    //     CloseButton = true,
    //     BackdropClick = true,
    //     CloseOnEscapeKey = true
    // };


    // private List<Campaign> campaigns = new();
    // private List<Campaign> filteredCampaigns => FilterCampaigns();

    protected override async Task OnInitializedAsync()
    {
        CampaignMasterData = await HttpClient.GetFromJsonAsync<CampaignMasterDataDTO>("api/Campaign/get-campaign-master-data") ?? new();

        Statuses = CampaignMasterData.CampaignStatuses;
        if(Statuses.Count() > 0)
        {
            SelectedStatus = Statuses.FirstOrDefault();
        }

        Categories = CampaignMasterData.CampaignCategories;
        if (Categories.Count() > 0)
        {
            SelectedCategory = Categories.FirstOrDefault();
        }
        await GetCampaignsSummaryAsync();
    }

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        await GetCampaignsSummaryAsync();
    }

    private async Task OnSearchAsync(string text)
    {
        searchTerm = text;
        await GetCampaignsSummaryAsync();
    }

    private async Task StatusChanged(DropDownDTO changedValue)
    {
        SelectedStatus = changedValue;
        await GetCampaignsSummaryAsync();
    }

    private async Task CategoryChanged(DropDownDTO changedValue)
    {
        SelectedCategory = changedValue;
        await GetCampaignsSummaryAsync();
    }

    private async Task GetCampaignsSummaryAsync()
    {
        var parameters = new CampaignFilterDTO
        {
            CurrentPage = CurrentPage,
            PageSize = PageSize,
            SearchTerm = searchTerm,
            StatusId = SelectedStatus.Id,
            CategoryId = SelectedCategory.Id
        };

        var queryString = QueryStringHelper.ToQueryString(parameters);
        var url = $"api/Campaign/get-campaigns-summary?{queryString}";

        CampaignsSummary = await HttpClient.GetFromJsonAsync<CampaignsSummaryDTO>(url) ?? new();
        //CampaignsSummary = await HttpClient.GetFromJsonAsync<CampaignMasterDataDTO>("api/Campaign/get-campaigns-summary") ?? new();
    }


    private async Task OpenCreateNewCampaignModal()
    {
        var parameters = new DialogParameters<AddEditCampaign>
        {
            { x => x.IsEdit, false },
            { x => x.IsViewOnly, false },
            { x => x.CampaignId, 0 },
            { x => x.CampaignMasterData, CampaignMasterData}
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditCampaign>("Add New Campaign", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CampaignDTO campaign)
        {
            await SaveCampaign(campaign);
        }
    }


    private async Task OpenEditCampaignModel(CampaignSummaryDTO campaignDto)
    {
        var parameters = new DialogParameters<AddEditCampaign>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, false },
            { x => x.CampaignId, campaignDto.Id },
            { x => x.CampaignMasterData, CampaignMasterData}
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditCampaign>("Edit Existing Campaign", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CampaignDTO campaign)
        {
            await UpdateCampaign(campaign);
        }
    }

    private async Task OpenViewCampaignModel(CampaignSummaryDTO campaignSummary)
    {
        var parameters = new DialogParameters<AddEditCampaign>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, true },
            { x => x.CampaignId, campaignSummary.Id },
            { x => x.CampaignMasterData, CampaignMasterData}
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditCampaign>("Edit Existing Campaign", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CampaignDTO campaign)
        {

        }
    }

    private async Task OpenAddDonationModel(CampaignSummaryDTO campaignSummary)
    {
        var parameters = new DialogParameters<AddDonationDialog>
        {
            { x => x.IsEdit, false },
            { x => x.IsViewOnly, false },
            { x => x.DonationId, 0 },
            { x => x.PreSelectedCampaignId, campaignSummary.Id }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddDonationDialog>("Add New Donation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is DonationDTO campaign)
        {
            await GetCampaignsSummaryAsync();
        }
    }

    private async Task ShareCampaign(CampaignSummaryDTO campaignSummary)
    {

    }

    private async Task DeleteCampaign(CampaignSummaryDTO campaignDto)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "ContentText", $"Are you sure you want to delete campaign '{campaignDto.Title}'? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Replace with your actual API endpoint
                var response = await HttpClient.DeleteAsync($"api/Campaign/delete-campaign/{campaignDto.Id}");

                if (response.IsSuccessStatusCode)
                {
                    await GetCampaignsSummaryAsync();
                    StateHasChanged();
                    Snackbar.Add("Campaign deleted successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to delete campaign.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting campaign: {ex.Message}", Severity.Error);
            }
        }
    }


    private async Task SaveCampaign(CampaignDTO campaign)
    {
        try
        {
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/Campaign/create-campaign", campaign);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                    await GetCampaignsSummaryAsync();
                    StateHasChanged();
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create Campaign.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating campaign: {ex.Message}", Severity.Error);
        }
    }


    private async Task UpdateCampaign(CampaignDTO campaign)
    {
        try
        {
            // Replace with your actual API endpoint
            var response = await HttpClient.PutAsJsonAsync("api/Campaign/update-campaign", campaign);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                    await GetCampaignsSummaryAsync();
                    StateHasChanged();
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to update campaign.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating campaign: {ex.Message}", Severity.Error);
        }
    }


    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Active" => Color.Success,
            "Draft" => Color.Warning,
            "Completed" => Color.Primary,
            "Paused" => Color.Secondary,
            _ => Color.Default
        };
    }
}