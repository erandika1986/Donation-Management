@using MudBlazor
@using System.Text.Json
@using ViharaFund.Admin.Common
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Shared.DTOs.JobCardTask

@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime


<!-- Add/Edit JobCard Dialog -->
<MudDialog>
    <TitleContent>
        @if (PaymentId > 0)
        {
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-3" />
                @($"Update existing Payment for Task {TaskName}")
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-3" />
                @($"Make New Payment for Task {TaskName}")
            </MudText>
        }

    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudGrid>
                <!-- Amount Field -->
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudNumericField @bind-Value="Payment.Amount"
                                     Label="Amount"
                                     Required="true"
                                     RequiredError="Amount is required!"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense"
                                     Min="0.01m"
                                     Step="0.01m"
                                     Format="N2"
                                     HideSpinButtons="true"
                                     HelperText="Enter payment amount" />
                </MudItem>

                <!-- Payment User Dropdown -->
                <MudItem xs="12" sm="12" md="6" lg="6">

                    <MudSelect T="DropDownDTO"
                               Label="Paid By User"
                               ToStringFunc="(item) => item is not null ? item.Name : string.Empty"
                               MultiSelection="false"
                               @bind-Value="Payment.PaymentUser"
                               Required="true"
                               RequiredError="Paid by user is required!"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense">
                        @foreach (var paymentUser in PaymentUsers)
                        {
                            <MudSelectItem T="DropDownDTO" Value="@paymentUser">@paymentUser.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


                <!-- Date Field -->
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudDatePicker @bind-Date="Payment.PaymentDate"
                                   Label="Payment Date"
                                   Required="true"
                                   RequiredError="Date is required!"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   MaxDate="DateTime.Today"
                                   HelperText="Select payment date" />
                </MudItem>

                <!-- Billing Period -->
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudTextField @bind-Value="Payment.BillingPeriod"
                                  Label="Billing Period"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </MudItem>

                <!-- Note Field -->
                <MudItem xs="12" sm="12" md="12" lg="12">

                    <MudTextField @bind-Value="Payment.Note"
                                  Label="Comment"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Lines="3"
                                  RequiredError="Please provide a comment"
                                  Placeholder="Enter reason for this action..."
                                  Counter="@MaxCommentLength"
                                  MaxLength="@MaxCommentLength" />
                </MudItem>

                <MudItem xs="12">
                    <MudText>Supporting Documents</MudText>

                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" AppendMultipleFiles="true">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled"

                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Upload Support Files
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    



                </MudItem>


            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Default">Cancel</MudButton>
            <MudButton Color="Color.Success"
                       Variant="Variant.Filled"
                   OnClick="ProcessPayment"
                       Disabled="!isFormValid || isSubmitting"
                       StartIcon="@Icons.Material.Filled.Save">
                @if (isSubmitting)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving...</MudText>
                }
                else
                {
                    @("Save Payment")
                }
            </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    private MudForm form;
    private bool isFormValid;
    private bool isProcessing = false;
    private bool isSubmitting = false;


    [Parameter] 
    public int MaxCommentLength { get; set; } = 500;

    [Parameter]
    public int TaskId { get; set; } = new();

    [Parameter]
    public int PaymentId { get; set; }

    [Parameter]
    public string TaskName { get; set; } = string.Empty;

    // Payment model to bind form data
    private TaskPaymentDTO Payment = new();
    private List<IBrowserFile> Files = new List<IBrowserFile>();

    public IEnumerable<DropDownDTO> PaymentUsers { get; set; } = new List<DropDownDTO>();
    private DropDownDTO SelectedPaymentUser { get; set; } = new();

    private int LoggedInUserId { get; set; } = 0;

    private long MaxFileSize = 10 * 1024 * 1024; // 10MB

    protected override async Task OnInitializedAsync()
    {

        await LoadMasterData();
        if (PaymentId > 0)
        {
            await LoadPaymentDetail();
        }
        else
        {
            Payment.TaskId = TaskId;
        }
    }

    private async Task LoadMasterData()
    {
        var masterData = await HttpClient.GetFromJsonAsync<TaskMasterDataDTO>($"api/JobCardTask/get-task-detail-master-data/{TaskId}") ?? new();
        PaymentUsers = masterData.AssignedGroupMembers ?? new List<DropDownDTO>();
        Payment.PaymentUser = PaymentUsers.FirstOrDefault(u => u.Id == masterData.CurrentUserId) ?? PaymentUsers.FirstOrDefault();
    }

    private async Task LoadPaymentDetail()
    {
        Payment = await HttpClient.GetFromJsonAsync<TaskPaymentDTO>($"api/JobCardTask/get-payment-detailBy-id/{PaymentId}") ?? new();
        Payment.PaymentUser = PaymentUsers.FirstOrDefault(u => u.Id == Payment.PaymentUser.Id) ?? PaymentUsers.FirstOrDefault();
    }

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            if (file.Size > MaxFileSize)
            {
                Snackbar.Add($"{file.Name} exceeds the maximum file size (10MB).", Severity.Error);
                continue;
            }
            try
            {
                //selectedFile = file;
                Files.Add(file);
                // FileNames.Add(file.Name);
            }
            catch (Exception ex)
            {
                //UploadErrors.Add($"Error uploading {file.Name}: {ex.Message}");
            }
        }
    }


    private async Task ProcessPayment()
    {
        if (!isFormValid) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            var content = new MultipartFormDataContent();

            // add primitive fields
            content.Add(new StringContent(Payment.Id.ToString()), nameof(TaskPaymentJsonDTO.Id));
            content.Add(new StringContent(Payment.TaskId.ToString()), nameof(TaskPaymentJsonDTO.TaskId));
            content.Add(new StringContent(Payment.Amount.ToString()), nameof(TaskPaymentJsonDTO.Amount));
            content.Add(new StringContent(Payment.Note ?? ""), nameof(TaskPaymentJsonDTO.Note));
            content.Add(new StringContent(Payment.PaymentDate?.ToString("o") ?? ""), nameof(TaskPaymentJsonDTO.PaymentDate));
            content.Add(new StringContent(Payment.PaymentUser.Id.ToString()), nameof(TaskPaymentJsonDTO.PaymentUserId));
            content.Add(new StringContent(Payment.BillingPeriod ?? ""), nameof(TaskPaymentJsonDTO.BillingPeriod));

               // Add all files
            foreach (var file in Files)
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 10_000_000));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                // 👇 Name must match DTO property: "Files"
                content.Add(fileContent, nameof(TaskPaymentJsonDTO.Files), file.Name);
            }

            // if (selectedFile is not null)
            // {
            //     // Add file
            //     var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10_000_000));
            //     fileContent.Headers.ContentType =
            //         new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            //     content.Add(fileContent, nameof(TaskPaymentJsonDTO.File), selectedFile.Name);
            // }
            // Add complex object properties individually
            // content.Add(new StringContent(Payment.TaskId.ToString()), "TaskId");
            // content.Add(new StringContent(Payment.Amount.ToString()), "Amount");
            // content.Add(new StringContent(Payment.Note), "Note");
            // content.Add(new StringContent(Payment.PaymentDate.ToString()), "PaymentDate");
            // content.Add(new StringContent(Payment.PaymentUser.Id.ToString()), "PaymentUserId");
            // content.Add(new StringContent(Payment.BillingPeriod), "BillingPeriod");

            // send as JSON string
           // content.Add(new StringContent(JsonSerializer.Serialize(Payment)), "employeeJson");
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsync("api/JobCardTask/save-payment", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                    MudDialog.Close(DialogResult.Ok(Payment));
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create task.", Severity.Error);
            }
            // Simulate payment processing
            //await Task.Delay(2000);

            // Here you would typically call your payment service
            // await PaymentService.ProcessPaymentAsync(paymentModel);

            //MudDialog.Close(DialogResult.Ok(Payment));
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a snackbar or error message
            Console.WriteLine($"Operation failed: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void CloseDialog()
    {
        MudDialog.Cancel();
    }

}