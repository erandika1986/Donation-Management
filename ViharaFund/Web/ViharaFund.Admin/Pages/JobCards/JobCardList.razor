@page "/job-cards"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using ViharaFund.Admin.Common
@using ViharaFund.Admin.Helper
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Application.DTOs.JobCard
@using ViharaFund.Domain.Enums
@using ViharaFund.Shared.DTOs.Common
@using ViharaFund.Shared.DTOs.JobCard
@using ViharaFund.Shared.Helpers

@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ILocalStorageService localStorage;

<PageTitle>Job Card Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Page Header -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <div class="d-flex justify-space-between align-center flex-wrap">
            <div>
                <MudText Typo="Typo.h4" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-3" />
                    Job Cards Management
                </MudText>
                <MudText Typo="Typo.body1" Class="mud-text-secondary">
                    Manage and track job cards across different priorities and statuses
                </MudText>
            </div>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenAddJobCardDialog"
                       Class="mt-2 mt-sm-0">
                New Job Card
            </MudButton>
        </div>
    </MudPaper>

    <!-- Filters Section -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudGrid AlignItems="Center">
            <!-- Search -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudTextField @bind-Value="searchString"
                              Label="Search"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Placeholder="Search by title or description..."
                              Immediate="true"
                              DebounceInterval="300"
                              OnDebounceIntervalElapsed="OnSearch" />
            </MudItem>

            <!-- Campaign Filter -->
            <MudItem xs="12" sm="6" md="3" lg="2">
                <MudSelect T="DropDownDTO" Label="Campaign" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" MultiSelection="false" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedCampaign" ValueChanged="@CampaignChanged">
                    @foreach (var campaign in ActiveCampaigns)
                    {
                        <MudSelectItem T="DropDownDTO" Value="@campaign">@campaign.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Priority Filter -->
            <MudItem xs="12" sm="6" md="3" lg="2">
                <MudSelect T="DropDownDTO" Label="Priority" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" MultiSelection="false" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedPriority" ValueChanged="@PriorityChanged">
                    @foreach (var priority in Priorities)
                    {
                        <MudSelectItem T="DropDownDTO" Value="@priority">@priority.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Status Filter -->
            <MudItem xs="12" sm="6" md="3" lg="2">
                <MudSelect T="DropDownDTO" Label="Status" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" MultiSelection="false" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedStatus" ValueChanged="@StatusChanged">
                    @foreach (var status in Statuses)
                    {
                        <MudSelectItem T="DropDownDTO" Value="@status">@status.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Actions -->
            <MudItem xs="12" md="12" lg="3" Class="d-flex justify-end">
                <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small" Class="d-flex justify-content-end">
                    @*                      <MudButton StartIcon="@Icons.Material.Filled.FilterAlt"
                                   OnClick="FilterJobCards"
                                   Color="Color.Primary">
                            Filter
                        </MudButton> *@
                    <MudButton StartIcon="@Icons.Material.Filled.Clear"
                               OnClick="ClearFilters"
                               Color="Color.Secondary">
                        Clear
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                               OnClick="RefreshData"
                               Color="Color.Default">
                        Refresh
                    </MudButton>
                </MudButtonGroup>
            </MudItem>
        </MudGrid>
    </MudPaper>

            <!-- Job Cards Table -->
    <!-- Campaigns Grid -->
    <MudGrid Class="pb-2">
        @foreach (var jobCard in AllJobCards)
        {
            <MudItem xs="12" md="6" lg="6">
                <MudCard Elevation="6" Style="border-radius: 15px; height: 100%; transition: all 0.3s ease;" Class="campaign-card">
                    <!-- Card Header -->
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-3">
                                <MudText Typo="Typo.h6" Class="font-weight-semibold mud-text-truncate flex-grow-1 mr-2">
                                   @jobCard.AssignedCampaign: @jobCard.Title
                                </MudText>
                                <MudChip T="string"
                                         Color="GetJobCardStatusColor(jobCard.Status)"
                                         Size="Size.Small"
                                         Class="px-3 py-1 text-xs font-weight-semibold text-uppercase">
                                    @GetJobCardStatusText(jobCard.Status)
                                </MudChip>
                            </MudStack>

                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    @(string.IsNullOrEmpty(@jobCard.JobCardNumber) ? "" : $"Job Card No: {@jobCard.JobCardNumber}") @($"Date: {@jobCard.CreatedDate.ToString("yyyy-MM-dd")}")
                                </MudText>
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    @($"Created By: {@jobCard.CreatedBy}")
                                </MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>

                    <!-- Progress Section -->
                    <MudCardContent Class="py-2">
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                            <MudText Typo="Typo.h5" Color="Color.Success" Class="font-weight-bold">
                               Total Spent @(CurrencyCode)@jobCard.ActualCost.ToString("#,##0.00")
                            </MudText>
                            @if (!jobCard.HaveRecurringTasks)
                            {
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                    of @(CurrencyCode)@jobCard.EstimatedBudget.ToString("#,##0.00")
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                    Has Recurring Tasks
                                </MudText>
                            }
                        </MudStack>
                            @if (!jobCard.HaveRecurringTasks)
                            {
                                <!-- Progress Bar -->
                                    <MudProgressLinear Color="Color.Success"
                                           Value="(double)jobCard.ProgressPercentage"
                                           Class="mb-3"
                                           Style="height: 8px; border-radius: 4px;" />
                            }
                        <MudGrid>
                            
                            @if (!jobCard.HaveRecurringTasks)
                            {
                                <MudItem xs="4">
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        @((int)jobCard.ProgressPercentage)% Complete
                                    </MudText>
                                </MudItem>
                                <MudItem xs="4" Class="text-center">
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        @jobCard.CompletedTaskCount of @jobCard.TotalTaskCount tasks
                                    </MudText>
                                </MudItem>
                                <MudItem xs="4" Class="text-right">
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        @jobCard.TotalTaskCount tasks total
                                    </MudText>
                                </MudItem>
                             }
                             else
                             {
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        This job card has Total @(jobCard.TotalTaskCount) recurring tasks. Please manage them separately.
                                        </MudText>
                                    </MudItem>
                            }
                            

                        </MudGrid>
                    </MudCardContent>
                    @if (jobCard.ApprovalHistory.Count>0 && jobCard.HaveRecurringTasks == false)
                    {
                        <!-- Approval Status Section -->
                        <MudCardContent Class="py-2">
                            <MudText Typo="Typo.subtitle2" Class="font-weight-medium mud-text-secondary mb-3">
                                Approval Status
                            </MudText>

                            <MudStack Spacing="2">
                                @foreach (var approval in jobCard.ApprovalHistory)
                                {
                                    <!-- First Approver -->
                                    <MudPaper Class="pa-3" Elevation="0" Style="background-color: var(--mud-palette-background-grey); border-radius: 8px;">
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                                <MudAvatar Size="Size.Small"
                                                           Color="@GetApprovalAvatarColor(approval.Status)"
                                                           Style="width: 32px; height: 32px;">
                                                    <MudIcon Icon="@GetApprovalIcon(approval.Status)" Size="Size.Small" />
                                                </MudAvatar>
                                                <div>
                                                    <MudText Typo="Typo.body2" Class="font-weight-medium">@($"Approval Level: {@approval.ApproveLevelName}")</MudText>
                                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">@($"Approved By: {@approval.ApproverUser}")</MudText>
                                                </div>
                                            </MudStack>
                                            <MudChip T="string"
                                                     Size="Size.Small"
                                                     Color="@GetApprovalStatusColor(approval.Status)"
                                                     Class="px-2 py-1 text-xs font-weight-medium">
                                                @GetApprovalStatusText(approval.Status)
                                            </MudChip>
                                        </MudStack>
                                    </MudPaper>
                                }
                            </MudStack>
                        </MudCardContent>
                    }


                    <!-- Description -->
                    <MudCardContent Class="py-1">
                        <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                            @jobCard.Description
                        </MudText>
                    </MudCardContent>

                    <!-- Card Actions -->
                    <MudCardActions Class="px-6 py-4" Style="background-color: var(--mud-palette-background-grey); border-top: 1px solid var(--mud-palette-divider);">
                        <MudStack Class="w-100">
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <!-- Add Task Button -->
                                <MudTooltip Text="Manage Tasks" Color="Color.Secondary" Placement="Placement.Top">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Secondary"
                                               Size="Size.Small"
                                               StartIcon="@Icons.Material.Filled.Task"
                                               OnClick="@(() => ManageTaskAsync(jobCard))"
                                               Class="me-2 mb-2">
                                        Manage Tasks
                                    </MudButton>
                                </MudTooltip>

                                <!-- Action Buttons -->
                                <MudStack Row Spacing="1">
                                    <MudTooltip Text="Edit" Color="Color.Warning" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Edit"
                                                       Size="Size.Small" 
                                                       Color="Color.Warning"
                                                       OnClick="@(() => EditJobCard(jobCard))"
                                                       Disabled="jobCard.Status != JobCardStatus.Draft && jobCard.Status != JobCardStatus.PendingApproval"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="View Details" Color="Color.Primary" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Visibility"
                                                       Size="Size.Small"
                                                       Color="Color.Primary"
                                                       OnClick="@(() => ViewJobCard(jobCard))"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>

                                    <MudTooltip Text="Delete" Color="Color.Error" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Delete"
                                                       Size="Size.Small"
                                                       Color="Color.Error"
                                                       OnClick="@(() => DeleteJobCard(jobCard))"
                                                       Disabled="jobCard.Status != JobCardStatus.Draft && jobCard.Status != JobCardStatus.PendingApproval && jobCard.Status != JobCardStatus.Cancelled"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>
                                </MudStack>
                            </MudStack>
                            @if (jobCard.Status == JobCardStatus.Draft && !jobCard.HaveRecurringTasks)
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.Upload"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => SubmitForApprovalAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Submit For Approval
                                    </MudButton>
                                </MudStack>
                            }
                            else if (jobCard.Status == JobCardStatus.PendingApproval || jobCard.Status == JobCardStatus.PartiallyApproved)
                            {
                                @foreach (var item in jobCard.ApprovalHistory)
                                {
                                    if(item.Status == ApprovalStatus.Pending)
                                    {
                                        <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                            <MudButton Variant="Variant.Filled"
                                                       Color="Color.Success"
                                                       StartIcon="@Icons.Material.Filled.Check"
                                                       FullWidth="true"
                                                       Size="Size.Small"
                                                       OnClick="@(() => ApproveAsync(jobCard,item))"
                                                       Class="text-sm font-weight-medium">
                                                @(item.ApproveLevelName) Approve
                                            </MudButton>
                                            <MudButton Variant="Variant.Filled"
                                                       Color="Color.Error"
                                                       StartIcon="@Icons.Material.Filled.Close"
                                                       FullWidth="true"
                                                       Size="Size.Small"
                                                       OnClick="@(() => RejectAsync(jobCard))"
                                                       Class="text-sm font-weight-medium">
                                                Reject
                                            </MudButton>
                                        </MudStack>
                                        break;
                                    }
                                }
                            }
                            else if (jobCard.Status == JobCardStatus.Approved || (jobCard.Status == JobCardStatus.Draft && jobCard.HaveRecurringTasks))
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Info"
                                               StartIcon="@Icons.Material.Filled.PlayArrow"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => MaskAsOnGoingAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Start Job Card
                                    </MudButton>
                                </MudStack>
                            }
                            else if (jobCard.Status == JobCardStatus.OnGoing)
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Warning"
                                               StartIcon="@Icons.Material.Filled.Pause"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => AskToOnHoldAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Ask To On-Hold
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.Cancel"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => AskToCancelAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Ask To Cancel
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.Check"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => AskToCompleteAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Ask To Complete
                                    </MudButton>
                                </MudStack>
                            }
                            else if (jobCard.Status == JobCardStatus.PendingOnHold)
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Warning"
                                               StartIcon="@Icons.Material.Filled.Pause"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => OnHoldAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Mark As On-Hold
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Info"
                                               StartIcon="@Icons.Material.Filled.PlayArrow"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => MaskAsOnGoingAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Resume As On Going
                                    </MudButton>
                                </MudStack>
                            }
                            else if (jobCard.Status == JobCardStatus.PendingCancellation || jobCard.Status == JobCardStatus.OnHold)
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.Cancel"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => CancelAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Mark As Canceled
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Info"
                                               StartIcon="@Icons.Material.Filled.PlayArrow"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => MaskAsOnGoingAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Resume As On Going
                                    </MudButton>
                                </MudStack>
                            }
                            else if (jobCard.Status == JobCardStatus.PendingCompletion)
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                     <MudButton Variant="Variant.Filled"
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.Check"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => CompleteAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Mark As Completed
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Info"
                                               StartIcon="@Icons.Material.Filled.PlayArrow"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               OnClick="@(() => MaskAsOnGoingAsync(jobCard))"
                                               Class="text-sm font-weight-medium">
                                        Resume Job Card
                                    </MudButton>
                                </MudStack>
                            }
                            <!-- Approval Actions -->
@*                             @if (jobCard.Status == JobCardStatus.PendingFirstApproval)
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.Check"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               Class="text-sm font-weight-medium">
                                        First Approve
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.Close"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               Class="text-sm font-weight-medium">
                                        Reject
                                    </MudButton>
                                </MudStack>
                            }
                            else if (jobCard.Status == JobCardStatus.FirstApproved)
                            {
                                <MudStack Row Spacing="2" Class="mt-4 pt-4" Style="border-top: 1px solid var(--mud-palette-divider);">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.Check"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               Class="text-sm font-weight-medium">
                                        Final Approve
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.Close"
                                               FullWidth="true"
                                               Size="Size.Small"
                                               Class="text-sm font-weight-medium">
                                        Reject
                                    </MudButton>
                                </MudStack>
                            } *@
                        </MudStack>
                    </MudCardActions>
            </MudCard>
        </MudItem>
                }
    </MudGrid>

                <!-- Actions -->
    <MudItem xs="12" md="12" lg="12" Class="d-flex justify-end">
        <MudPagination Page="@CurrentPage"
                       PageSize="@PageSize"
                       TotalItems="@TotalPages"
                       OnPageChanged="OnPageChanged"
                       HideNextPrev="false" />
    </MudItem>
</MudContainer>

@code {

    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalPages = 0;

    private List<JobCardSummaryDTO> AllJobCards = new List<JobCardSummaryDTO>();
    // Data properties
    private List<JobCardSummaryDTO> jobCards = new();
    private IEnumerable<JobCardSummaryDTO> filteredJobCards = new List<JobCardSummaryDTO>();
    private List<DropDownDTO> RoleGroups = new();

    // UI state

    private bool _loading = false;
    private bool _isMasterDataLoaded = false;

    //Master Data
    public JobCardMasterDataDTO MasterData { get; set; } = new();

    // Filter properties
    private IEnumerable<DropDownDTO> Priorities = new List<DropDownDTO>();
    public DropDownDTO SelectedPriority { get; set; } = new();

    private IEnumerable<DropDownDTO> Statuses = new List<DropDownDTO>();
    public DropDownDTO SelectedStatus { get; set; } = new();

    private IEnumerable<DropDownDTO> ActiveCampaigns = new List<DropDownDTO>();
    public DropDownDTO SelectedCampaign { get; set; } = new();

    private string searchString = "";

    public string CurrencyCode { get; set; } = string.Empty;

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium };

    protected override async Task OnInitializedAsync()
    {
        CurrencyCode = await localStorage.GetItemAsync<string>("currencyCode");
        await LoadMasterDataAsync();
        await GetJobCardsSummaryAsync();
    }

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        await GetJobCardsSummaryAsync();
    }

    private async Task LoadMasterDataAsync()
    {
        MasterData = await HttpClient.GetFromJsonAsync<JobCardMasterDataDTO>("api/JobCard/get-job-card-master-data") ?? new();

        Priorities = MasterData.JobPriorities;
        SelectedPriority = Priorities.FirstOrDefault() ?? new DropDownDTO();

        Statuses = MasterData.Statuses;
        SelectedStatus = Statuses.FirstOrDefault() ?? new DropDownDTO();

        ActiveCampaigns = MasterData.ActiveCampaigns;
        SelectedCampaign = ActiveCampaigns.FirstOrDefault() ?? new DropDownDTO();

        _isMasterDataLoaded = true;

        StateHasChanged();


    }

    private async Task GetJobCardsSummaryAsync()
    {
        var parameters = new JobCardFilterDTO
        {
            CurrentPage = CurrentPage,
            PageSize = PageSize,
            SearchTerm = searchString,
            CampaignId = SelectedCampaign?.Id ?? 0,
            Priority = SelectedPriority?.Id ?? 0,
            Status = SelectedStatus?.Id ?? 0
        };

        var queryString = QueryStringHelper.ToQueryString(parameters);

        var url = $"api/JobCard/get-all?{queryString}";

        var response = await HttpClient.GetFromJsonAsync<PaginatedResultDTO<JobCardSummaryDTO>>(url) ?? new();
        //CampaignsSummary = await HttpClient.GetFromJsonAsync<CampaignMasterDataDTO>("api/Campaign/get-campaigns-summary") ?? new();
        AllJobCards = response.Items;
        TotalPages = response.TotalPages; 
        StateHasChanged();
    }

    private async Task CampaignChanged(DropDownDTO dropDownDTO)
    {
        SelectedCampaign = dropDownDTO;
        await GetJobCardsSummaryAsync();
    }

    private async Task PriorityChanged(DropDownDTO priority)
    {
        SelectedPriority = priority;
        await GetJobCardsSummaryAsync();
    }

    private async Task StatusChanged(DropDownDTO priority)
    {
        SelectedPriority = priority;
        await GetJobCardsSummaryAsync();
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await GetJobCardsSummaryAsync();
    }

    private async Task ClearFilters()
    {
        SelectedPriority = Priorities.FirstOrDefault() ?? new DropDownDTO();
        SelectedStatus = Statuses.FirstOrDefault() ?? new DropDownDTO();
        await GetJobCardsSummaryAsync();
    }

    private async Task RefreshData()
    {
        await GetJobCardsSummaryAsync();
        StateHasChanged();
    }

    // Action handlers
    private async Task OpenAddJobCardDialog()
    {
        var parameters = new DialogParameters<AddEditJobCardDialog>
        {
            { x => x.IsEdit, false },
            { x => x.IsViewOnly, false },
            { x => x.JobCardId, 0 },
            { x => x.MasterData, MasterData }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditJobCardDialog>("Add New Job Card", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardDTO jobCard)
        {
            await GetJobCardsSummaryAsync();
        }
    }

    private async Task ViewJobCard(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters<AddEditJobCardDialog>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, true },
            { x => x.JobCardId, jobCard.Id },
            { x => x.MasterData, MasterData }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditJobCardDialog>("View Job Card", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardDTO updatedJobCard)
        {

        }
    }

    private async Task EditJobCard(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters<AddEditJobCardDialog>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, false },
            { x => x.JobCardId, jobCard.Id },
            { x => x.MasterData, MasterData }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditJobCardDialog>("Edit Job Card", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardDTO updatedJobCard)
        {
            await GetJobCardsSummaryAsync();
        }
        // Open edit dialog

    }

    private async Task DeleteJobCard(JobCardSummaryDTO jobCard)
    {
        // Show confirmation dialog and delete
        await GetJobCardsSummaryAsync();
    }

    private async Task ManageTaskAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters<TaskListDialog>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, false },
            { x => x.JobCardId, jobCard.Id },
            { x => x.JobCardTitle, jobCard.Title },
            { x =>  x.IsRecurringTask, jobCard.HaveRecurringTasks},
            { x => x.JobCardStatus, jobCard.Status}
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true,
            Position = DialogPosition.TopCenter
        };

        var dialog = await DialogService.ShowAsync<TaskListDialog>("Manage Tasks", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            await GetJobCardsSummaryAsync();
        }
    }

    private async Task SubmitForApprovalAsync(JobCardSummaryDTO jobCard)
    {

        var parameters = new DialogParameters
        {
            { "Title", $"Submit Job Card For Approval ({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Success },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;

            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/submit-for-approval", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task ApproveAsync(JobCardSummaryDTO jobCard, JobCardApprovalDTO approval)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Approve Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Success },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;

            approval.Remarks = comment.Comment;

            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/approve", approval);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task RejectAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Reject Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Error },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;

            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/mark-as-rejected", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task MaskAsOnGoingAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Start Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Info },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;

            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/mark-as-ongoing", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task AskToOnHoldAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Ask to Hold Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Warning },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;

            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/ask-for-onhold", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task OnHoldAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Hold Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Warning },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;
            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/mark-as-onhold", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task AskToCancelAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Ask to Cancel Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Warning },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;

            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/ask-for-cancellation", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task CancelAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Cancel Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Warning },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;

            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/mark-as-cancelled", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }

    private async Task AskToCompleteAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Ask to Complete Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Warning },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;
            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/ask-for-completion", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Operation failed.", Severity.Error);
            }
        }
    }

    private async Task CompleteAsync(JobCardSummaryDTO jobCard)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Complete Job Card({jobCard.Title})" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Submit" },
            { "CancelText", "Cancel" },
            { "Color", Color.Success },
            { "Icon", Icons.Material.Filled.CheckCircle },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var comment = result.Data as CommentDTO;
            var request = new JobCardStatusUpdateDTO()
            {
                Comment = comment.Comment,
                JobCardId = jobCard.Id
            };
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/JobCard/mark-as-completed", request);

            if (response.IsSuccessStatusCode)
            {
                var saveResult = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (saveResult is not null && saveResult.Succeeded)
                {
                    Snackbar.Add(saveResult.SuccessMessage, Severity.Success);
                    await GetJobCardsSummaryAsync();
                }
                else if (result is not null && !saveResult.Succeeded)
                {
                    Snackbar.Add(string.Join(",", saveResult.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create donation.", Severity.Error);
            }
        }
    }


    // Helper methods for styling
    private string GetPriorityIcon(JobPriority priority) => priority switch
    {
        JobPriority.Low => Icons.Material.Filled.KeyboardArrowDown,
        JobPriority.Medium => Icons.Material.Filled.Remove,
        JobPriority.High => Icons.Material.Filled.KeyboardArrowUp,
        JobPriority.Critical => Icons.Material.Filled.PriorityHigh,
        _ => Icons.Material.Filled.Circle
    };

    private Color GetPriorityColor(JobPriority priority) => priority switch
    {
        JobPriority.Low => Color.Success,
        JobPriority.Medium => Color.Warning,
        JobPriority.High => Color.Error,
        JobPriority.Critical => Color.Error,
        _ => Color.Default
    };

    private Color GetJobCardStatusColor(JobCardStatus status)
    {
        return status switch
        {
            JobCardStatus.PendingApproval => Color.Warning,
            JobCardStatus.PartiallyApproved => Color.Info,
            JobCardStatus.Approved => Color.Success,
            JobCardStatus.Rejected => Color.Error,
            JobCardStatus.PendingCompletion => Color.Info,
            JobCardStatus.Completed => Color.Success,
            JobCardStatus.OnGoing => Color.Info,
            JobCardStatus.PendingOnHold => Color.Warning,
            JobCardStatus.OnHold => Color.Warning,
            JobCardStatus.PendingCancellation => Color.Error,
            JobCardStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }

    private string GetJobCardStatusText(JobCardStatus status)
    {
        return EnumHelper.GetEnumDescription(status) ?? status.ToString();
    }

    private Color GetApprovalAvatarColor(ApprovalStatus status)
    {
        return status switch
        {
            ApprovalStatus.Approved => Color.Success,
            ApprovalStatus.Rejected => Color.Error,
            _ => Color.Warning
        };
    }

    private string GetApprovalIcon(ApprovalStatus status)
    {
        return status switch
        {
            ApprovalStatus.Approved => Icons.Material.Filled.Check,
            ApprovalStatus.Rejected => Icons.Material.Filled.Close,
            _ => Icons.Material.Filled.Schedule
        };
    }

    private Color GetApprovalStatusColor(ApprovalStatus status)
    {
        return status switch
        {
            ApprovalStatus.Approved => Color.Success,
            ApprovalStatus.Rejected => Color.Error,
            _ => Color.Warning
        };
    }

    private string GetApprovalStatusText(ApprovalStatus status)
    {
        return status switch
        {
            ApprovalStatus.Approved => "Approved",
            ApprovalStatus.Rejected => "Rejected",
            _ => "Pending"
        };
    }
}

