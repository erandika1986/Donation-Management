@using ViharaFund.Admin.Helper
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Application.DTOs.JobCardTask
@using ViharaFund.Shared.DTOs.JobCardTask
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<MudDialog class="my-xl-dialog">
    <TitleContent>
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <div class="d-flex justify-space-between align-center flex-wrap">
                <div>
                    <MudText Typo="Typo.h6" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Task" Class="mr-3" />
                        Manage Tasks
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Manage and track tasks for  @JobCardTitle
                    </MudText>
                </div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenAddTaskDialog"
                           Class="mt-2 mt-sm-0">
                    New Task
                </MudButton>
            </div>
        </MudPaper>
    </TitleContent>
    <DialogContent>
        <!-- Filters Section -->
        <MudPaper Class="pa-4 mb-4" Elevation="1">
            <MudGrid AlignItems="Center">
                <!-- Search -->
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudTextField @bind-Value="searchString"
                                  Label="Search"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Placeholder="Search by title or description..."
                                  Immediate="true"
                                  DebounceInterval="300" />
                </MudItem>

                <!-- Campaign Filter -->
                <MudItem xs="12" sm="6" md="3" lg="2">
                    <MudSelect T="DropDownDTO" Label="Campaign" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" MultiSelection="false" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedTaskStatus" ValueChanged="@StatusChanged">
                        @foreach (var status in TaskStatuses)
                        {
                            <MudSelectItem T="DropDownDTO" Value="@status">@status.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Actions -->
                <MudItem xs="12" md="12" lg="7" Class="d-flex justify-end">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small" Class="d-flex justify-content-end">
                        <MudButton StartIcon="@Icons.Material.Filled.Clear"
                                   OnClick="ClearFilters"
                                   Color="Color.Secondary">
                            Clear
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="RefreshData"
                                   Color="Color.Default">
                            Refresh
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <!-- Job Cards Table -->
        <!-- Campaigns Grid -->
        <MudGrid>
            @foreach (var task in Tasks)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Elevation="6" Style="border-radius: 15px; height: 100%; transition: all 0.3s ease;" Class="campaign-card">
                        <!-- Card Header -->
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Class="mb-2">@task.Title</MudText>
                                <MudGrid AlignItems="Center" Justify="Justify.SpaceBetween">
                                    <MudItem>
                                        <MudChip T="string" Color="@GetStatusColor(task.TaskStatus.Id)" Size="Size.Small" Text="@task.TaskStatus.Name.ToUpper()" />
                                    </MudItem>
                                    <MudItem>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@task.StartDate - @task.EndDate)</MudText>
                                    </MudItem>
                                </MudGrid>

                            </CardHeaderContent>
                        </MudCardHeader>

                        <!-- Progress Section -->
                        <MudCardContent Class="pt-1 pb-3">
                            <MudGrid AlignItems="Center" Justify="Justify.SpaceBetween" Class="mb-3">
                                <MudItem>
                                    <MudText Typo="Typo.h5" Color="Color.Success">@task.CurrencyType @( @task.ActualAmount.HasValue? @task.ActualAmount.Value.ToString("N0") : "0.00") </MudText>
                                </MudItem>
                                <MudItem>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">of @task.CurrencyType  @( @task.EstimateAmount)</MudText>
                                </MudItem>
                            </MudGrid>

                            <!-- Card Actions -->
                            <MudCardActions Class="pa-4 d-flex flex-wrap align-items-center" Style="background: #fafafa;">
                                <MudTooltip Text="Add New Donation" Color="Color.Secondary" Placement="Placement.Top">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Secondary"
                                               Size="Size.Small"
                                               StartIcon="@Icons.Material.Filled.AttachMoney"
                                               Class="me-2 mb-2">
                                        Add
                                    </MudButton>
                                </MudTooltip>

                                <MudSpacer />
                                @if ((ViharaFund.Domain.Enums.TaskStatus)task.TaskStatus.Id == ViharaFund.Domain.Enums.TaskStatus.Pending)
                                {
                                    <MudTooltip Text="Edit" Color="Color.Warning" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Edit"
                                                       Size="Size.Small"
                                                       Color="Color.Warning"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Launch" Color="Color.Primary" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Launch"
                                                       Size="Size.Small"
                                                       Color="Color.Primary"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>
                                }
                                else
                                {
                                    <MudTooltip Text="Edit" Color="Color.Warning" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Edit"
                                                       Size="Size.Small"
                                                       Color="Color.Warning"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Share" Color="Color.Info" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Share"
                                                       Size="Size.Small"
                                                       Color="Color.Info"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>
                                    <MudTooltip Text="View Details" Color="Color.Primary" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled"
                                                       Icon="@Icons.Material.Filled.Visibility"
                                                       Size="Size.Small"
                                                       Color="Color.Primary"
                                                       Class="m-1"></MudIconButton>
                                    </MudTooltip>
                                }
                                <MudTooltip Text="Delete" Color="Color.Error" Placement="Placement.Top">
                                    <MudIconButton Variant="Variant.Filled"
                                                   Icon="@Icons.Material.Filled.Delete"
                                                   Size="Size.Small"
                                                   Color="Color.Error"
                                                   Class="m-1"></MudIconButton>
                                </MudTooltip>
                            </MudCardActions>
                        </MudCardContent>

 


                </MudCard>
            </MudItem>
                        }
        </MudGrid>

    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public bool IsViewOnly { get; set; }

    [Parameter]
    public int JobCardId { get; set; } = new();

    [Parameter]
    public string JobCardTitle { get; set; } = string.Empty;

    private string searchString = "";

    private IEnumerable<DropDownDTO> TaskStatuses = new List<DropDownDTO>();
    public DropDownDTO SelectedTaskStatus { get; set; } = new();

    private TaskMasterDataDTO MasterData { get; set; } = new();

    private IEnumerable<JobCardTaskDTO> Tasks = new List<JobCardTaskDTO>();

    private int CurrentPage = 1;
    private int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadMasterData();
    }

    private async Task LoadMasterData()
    {
        MasterData = await HttpClient.GetFromJsonAsync<TaskMasterDataDTO>("api/JobCardTask/get-task-master-data") ?? new();
        TaskStatuses = MasterData.TaskStatuses ?? new List<DropDownDTO>();
        SelectedTaskStatus = TaskStatuses.FirstOrDefault() ?? new DropDownDTO();

        await GetJobCardTaskAsync();
    }

    private async Task GetJobCardTaskAsync()
    {
        Tasks = await HttpClient.GetFromJsonAsync<List<JobCardTaskDTO>>($"api/JobCardTask/get-all/{JobCardId}") ?? new();

        StateHasChanged();
    }

    private async Task StatusChanged(DropDownDTO status)
    {
        SelectedTaskStatus = status;
        await GetJobCardTaskAsync();
    }

    private async Task ClearFilters()
    {
        SelectedTaskStatus = TaskStatuses.FirstOrDefault() ?? new DropDownDTO();
        await GetJobCardTaskAsync();
    }

    private async Task RefreshData()
    {

    }

    private Color GetStatusColor(int status)
    {
        return (ViharaFund.Domain.Enums.TaskStatus)status switch
        {
            ViharaFund.Domain.Enums.TaskStatus.Completed => Color.Success,
            ViharaFund.Domain.Enums.TaskStatus.OnHold => Color.Warning,
            ViharaFund.Domain.Enums.TaskStatus.Canceled => Color.Error,
            ViharaFund.Domain.Enums.TaskStatus.OnGoing => Color.Info,
            _ => Color.Secondary
        };
    }

    private async Task OpenAddTaskDialog()
    {
        var parameters = new DialogParameters<AddEditTaskDialog>
        {
            { x => x.IsEdit, false },
            { x => x.IsViewOnly, false },
            { x => x.TaskId, 0 },
            { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            { x => x.JobCardId, JobCardId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditTaskDialog>("Add New Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO task)
        {
            //await GetJobCardsSummaryAsync();
        }
    }

    private async Task ViewJobCard(JobCardTaskPaymentDTO task)
    {
        var parameters = new DialogParameters<AddEditTaskDialog>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, true },
            { x => x.TaskId, task.Id },
            { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            { x => x.JobCardId, JobCardId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditTaskDialog>("View Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO viewTask)
        {

        }
    }

    private async Task EditJobCard(JobCardTaskDTO task)
    {
        var parameters = new DialogParameters<AddEditTaskDialog>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, false },
            { x => x.TaskId, task.Id },
            { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            { x => x.JobCardId, JobCardId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditTaskDialog>("Edit Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO updatedTask)
        {
            //await GetJobCardsSummaryAsync();
        }
        // Open edit dialog

    }

}
