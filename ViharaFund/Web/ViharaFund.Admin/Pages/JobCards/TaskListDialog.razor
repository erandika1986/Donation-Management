@using ViharaFund.Admin.Helper
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Application.DTOs.JobCardTask
@using ViharaFund.Shared.DTOs.JobCardTask
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<MudDialog class="my-xl-dialog">
    <TitleContent>
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <div class="d-flex justify-space-between align-center flex-wrap">
                <div>
                    <MudText Typo="Typo.h6" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Task" Class="mr-3" />
                        Manage Tasks
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Manage and track tasks for  @JobCardTitle
                    </MudText>
                </div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenAddTaskDialog"
                           Disabled="@(@IsViewOnly || @JobCardStatus != Domain.Enums.JobCardStatus.Draft)"
                           Class="mt-2 mt-sm-0">
                    New Task
                </MudButton>
            </div>
        </MudPaper>
    </TitleContent>
    <DialogContent>
        <!-- Filters Section -->
        <MudPaper Class="pa-4 mb-4" Elevation="1">
            <MudGrid AlignItems="Center">
                <!-- Search -->
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudTextField @bind-Value="searchString"
                                  Label="Search"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Placeholder="Search by title or description..."
                                  Immediate="true"
                                  DebounceInterval="300" OnDebounceIntervalElapsed="OnSearch" />
                </MudItem>

                <!-- Campaign Filter -->
                <MudItem xs="12" sm="6" md="3" lg="2">
                    <MudSelect T="DropDownDTO" Label="Status" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" MultiSelection="false" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedTaskStatus" ValueChanged="@StatusChanged">
                        @foreach (var status in TaskStatuses)
                        {
                            <MudSelectItem T="DropDownDTO" Value="@status">@status.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Actions -->
                <MudItem xs="12" md="12" lg="7" Class="d-flex justify-end">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small" Class="d-flex justify-content-end">
                        <MudButton StartIcon="@Icons.Material.Filled.Clear"
                                   OnClick="ClearFilters"
                                   Color="Color.Secondary">
                            Clear
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="RefreshData"
                                   Color="Color.Default">
                            Refresh
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <!-- Job Cards Table -->
        <!-- Campaigns Grid -->
        <MudGrid>
            @foreach (var task in Tasks)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Elevation="6" Style="border-radius: 15px; height: 100%; transition: all 0.3s ease;" Class="campaign-card">
                        <!-- Card Header -->
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-3">
                                    <MudText Typo="Typo.h6" Class="font-weight-semibold mud-text-truncate flex-grow-1 mr-2">
                                        @task.Title
                                    </MudText>
                                    <MudChip T="string"
                                             Color="GetStatusColor(task.TaskStatus.Id)"
                                             Size="Size.Small"
                                             Class="px-3 py-1 text-xs font-weight-semibold text-uppercase">
                                        @(@task.TaskStatus.Name.ToUpper())
                                    </MudChip>
                                </MudStack>

                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        @(string.IsNullOrEmpty(@task.TaskNumber) ? "" : $"Task No: {@task.TaskNumber} ") @($"Start Date: {@task.StartDate}- End Date: {@task.EndDate}")
                                    </MudText>
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        @($"Created By: {@task.CreatedBy}")
                                    </MudText>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>


                        <!-- Description -->
                        <MudCardContent Class="py-1">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                                @task.Description
                            </MudText>
                        </MudCardContent>

                        <!-- Progress Section -->
                        <MudCardContent Class="pt-1 pb-3">
                            @if (!IsRecurringTask)
                            {
                                <MudProgressLinear Color="@(@task.ProgressPercentage > 100 ? Color.Error : Color.Success)"
                                               Value="(double)task.ProgressPercentage"
                                               Class="mb-3"
                                               Style="height: 8px; border-radius: 4px;" />
                            }

                            <MudGrid AlignItems="Center" Justify="Justify.SpaceBetween" Class="mb-3">
                                <MudItem>
                                    <MudText 
                                        Typo="Typo.h5" 
                                        Color="Color.Success">Spent @task.CurrencyType @( @task.ActualAmount.HasValue? @task.ActualAmount.Value.ToString("N0") : "0.00")
                                        @if (@task.ProgressPercentage > 100)
                                        {
                                            <span style="color:red;font-size:14px;" class="blinking-text">
                                                (Exceeded)
                                            </span>
                                        }

                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    @if (!task.IsRecurringTasks)
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">out of the estimated @task.CurrencyType  @( @task.EstimateAmount)</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Recurring Task</MudText>
                                    }
                                </MudItem>
                            </MudGrid>


                            <!-- Card Actions -->
                            <MudCardActions Class="pa-4 d-flex flex-wrap align-items-center" Justify="Justify.Center" Style="background: #fafafa;">
                                @if ((ViharaFund.Domain.Enums.TaskStatus)@task.TaskStatus.Id == ViharaFund.Domain.Enums.TaskStatus.OnGoing)
                                {
                                    <MudTooltip Text="Add New Donation" Color="Color.Secondary" Placement="Placement.Top">
                                        <MudButton Variant="Variant.Outlined"
                                                   Color="Color.Secondary"
                                                   Size="Size.Small"
                                                   StartIcon="@Icons.Material.Filled.AttachMoney"
                                                   OnClick="@(() => OpenPaymentDialog(task))"
                                                   Class="me-2 mb-2">
                                            Make a Payment
                                        </MudButton>
                                    </MudTooltip>                           
                                }
                                <MudTooltip Text="View Task Detail" Color="Color.Info" Placement="Placement.Top">
                                    <MudButton Variant="Variant.Outlined"
                                                   Size="Size.Small"
                                                   StartIcon="@Icons.Material.Filled.Visibility"
                                                   Color="Color.Info"
                                                   OnClick="@(() => ViewJobCard(task))"
                                                   Class="me-2 mb-2">View Detail</MudButton>
                                </MudTooltip>
                                <MudTooltip Text="View Comments" Color="Color.Secondary" Placement="Placement.Top">
                                    <MudButton Variant="Variant.Outlined"
  
                                               Size="Size.Small"
                                               StartIcon="@Icons.Material.Filled.Chat"
                                               OnClick="@(() => ViewComments(task))"
                                               Class="me-2 mb-2">
                                        Add a Comment
                                    </MudButton>
                                </MudTooltip>
@*                                 <MudSpacer /> *@
                                @if ((ViharaFund.Domain.Enums.TaskStatus)task.TaskStatus.Id == ViharaFund.Domain.Enums.TaskStatus.Pending)
                                {
                                    <MudTooltip Text="Edit" Color="Color.Warning" Placement="Placement.Top">
                                        <MudButton Variant="Variant.Outlined"
                                                   StartIcon="@Icons.Material.Filled.Edit"
                                                       Size="Size.Small"
                                                       Color="Color.Warning"
                                                       OnClick="@(() => EditJobCard(task))"
                                                   Class="me-2 mb-2">Edit</MudButton>
                                    </MudTooltip>
                                    <MudTooltip Text="Delete" Color="Color.Error" Placement="Placement.Top">
                                        <MudButton Variant="Variant.Outlined"
                                                   StartIcon="@Icons.Material.Filled.Delete"
                                                       Size="Size.Small"
                                                       Color="Color.Error"
                                                       OnClick="@(() => DeleteJobCard(task))"
                                                   Class="me-2 mb-2">Delete</MudButton>
                                    </MudTooltip>
                                }
                                else if ((ViharaFund.Domain.Enums.TaskStatus)task.TaskStatus.Id == ViharaFund.Domain.Enums.TaskStatus.Approved)
                                {
                                    @if (JobCardStatus == Domain.Enums.JobCardStatus.OnGoing)
                                    {
                                        <MudTooltip Text="Start Task" Color="Color.Info" Placement="Placement.Top">
                                            <MudButton Variant="Variant.Outlined"
                                                   StartIcon="@Icons.Material.Filled.PlayArrow"
                                                       Size="Size.Small"
                                                       Color="Color.Success"
                                                       OnClick="@(() => StartJobCard(task))"
                                                   Class="me-2 mb-2">Start Task</MudButton>
                                        </MudTooltip>
                                    }
                                }
                                else if ((ViharaFund.Domain.Enums.TaskStatus)task.TaskStatus.Id == ViharaFund.Domain.Enums.TaskStatus.OnGoing)
                                {
                                    @if (JobCardStatus == Domain.Enums.JobCardStatus.OnGoing)
                                    {
                                        <MudTooltip Text="Mark As Completed" Color="Color.Secondary" Placement="Placement.Top">
                                            <MudButton Variant="Variant.Outlined"
                                                       StartIcon="@Icons.Material.Filled.Check"
                                                       Size="Size.Small"
                                                       Color="Color.Secondary"
                                                       OnClick="@(() => CompleteTask(task))"
                                                       Class="me-2 mb-2">Complete</MudButton>
                                        </MudTooltip>
                                    }

                                }

                                <MudTooltip Text="Manage Task Images" Color="Color.Primary" Placement="Placement.Top">
                                    <MudButton Variant="Variant.Outlined"
                                               StartIcon="@Icons.Material.Filled.Image"
                                                   Size="Size.Small"
                                                   Color="Color.Primary"
                                                   OnClick="@(() => ViewImages(task))"
                                               Class="me-2 mb-2">Task Images</MudButton>
                                </MudTooltip>
                            </MudCardActions>
                        </MudCardContent>

 


                </MudCard>
            </MudItem>
                        }
        </MudGrid>

    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public bool IsViewOnly { get; set; }

    [Parameter]
    public int JobCardId { get; set; } = new();

    [Parameter]
    public bool IsRecurringTask { get; set; }

    [Parameter]
    public ViharaFund.Domain.Enums.JobCardStatus JobCardStatus { get; set; }

    [Parameter]
    public string JobCardTitle { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<bool> OnTasksUpdated { get; set; }

    private string searchString = "";

    private IEnumerable<DropDownDTO> TaskStatuses = new List<DropDownDTO>();
    public DropDownDTO SelectedTaskStatus { get; set; } = new();

    private TaskMasterDataDTO MasterData { get; set; } = new();

    private IEnumerable<JobCardTaskSummaryDTO> Tasks = new List<JobCardTaskSummaryDTO>();

    private int CurrentPage = 1;
    private int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadMasterData();
    }

    private async Task LoadMasterData()
    {
        MasterData = await HttpClient.GetFromJsonAsync<TaskMasterDataDTO>("api/JobCardTask/get-task-list-master-data") ?? new();
        TaskStatuses = MasterData.TaskStatuses ?? new List<DropDownDTO>();
        SelectedTaskStatus = TaskStatuses.FirstOrDefault() ?? new DropDownDTO();

        await GetJobCardTaskAsync();
    }

    private async Task GetJobCardTaskAsync()
    {
        var parameters = new JobTaskFilterDTO
        {
            JobCardId = JobCardId,
            SearchText = searchString,
            TaskStatus = SelectedTaskStatus?.Id ?? 0,
        };

        var queryString = QueryStringHelper.ToQueryString(parameters);

        var url = $"api/JobCardTask/get-all/?{queryString}";
        Tasks = await HttpClient.GetFromJsonAsync<List<JobCardTaskSummaryDTO>>(url) ?? new();

        StateHasChanged();
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await GetJobCardTaskAsync();
    }

    private async Task StatusChanged(DropDownDTO status)
    {
        SelectedTaskStatus = status;
        await GetJobCardTaskAsync();
    }

    private async Task ClearFilters()
    {
        SelectedTaskStatus = TaskStatuses.FirstOrDefault() ?? new DropDownDTO();
        await GetJobCardTaskAsync();
    }

    private async Task RefreshData()
    {

    }

    private Color GetStatusColor(int status)
    {
        return (ViharaFund.Domain.Enums.TaskStatus)status switch
        {
            ViharaFund.Domain.Enums.TaskStatus.Approved => Color.Success,
            ViharaFund.Domain.Enums.TaskStatus.Completed => Color.Primary,
            // ViharaFund.Domain.Enums.TaskStatus.OnHold => Color.Warning,
            // ViharaFund.Domain.Enums.TaskStatus.Canceled => Color.Error,
            ViharaFund.Domain.Enums.TaskStatus.OnGoing => Color.Info,
            _ => Color.Secondary
        };
    }

    private async Task OpenAddTaskDialog()
    {
        var parameters = new DialogParameters<AddEditTaskDialog>
        {
            { x => x.IsEdit, false },
            { x => x.IsViewOnly, false },
            { x => x.TaskId, 0 },
            { x => x.IsRecurringTask, IsRecurringTask },
            { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            { x => x.JobCardId, JobCardId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditTaskDialog>("Add New Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO task)
        {
            await GetJobCardTaskAsync();
            await OnTasksUpdated.InvokeAsync(true);
        }
    }

    private async Task OpenPaymentDialog(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<MakeAPaymentDialog>
        {
            { x => x.TaskId, task.Id },
            { x => x.PaymentId, 0 },
            { x => x.TaskName, task.Title }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = false,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<MakeAPaymentDialog>("Make a Payment", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is TaskPaymentDTO taskPayment)
        {

            task.ActualAmount = task.ActualAmount + taskPayment.Amount;
            task.ProgressPercentage = task.EstimateAmount > 0 ? ((decimal)task.ActualAmount / (decimal)task.EstimateAmount) * 100 : 0;
            await OnTasksUpdated.InvokeAsync(true);
        }
    }

    private async Task ViewJobCard(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<TaskDetailDialog>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, true },
            { x => x.TaskId, task.Id },
            { x => x.IsRecurringTask, IsRecurringTask },
            { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            { x => x.JobCardId, JobCardId }
        };

        parameters.Add("OnTaskDetailUpdated", EventCallback.Factory.Create<TaskDetailDTO>(this, HandleTaskDetailUpdated));

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<TaskDetailDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO viewTask)
        {
            await OnTasksUpdated.InvokeAsync(true);
        }
    }

    private async Task HandleTaskDetailUpdated(TaskDetailDTO task)
    {
        await GetJobCardTaskAsync();
        await OnTasksUpdated.InvokeAsync(true);
        StateHasChanged();
    }

    private async Task EditJobCard(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<AddEditTaskDialog>
        {
            { x => x.IsEdit, true },
            { x => x.IsViewOnly, false },
            { x => x.TaskId, task.Id },
            { x => x.IsRecurringTask, IsRecurringTask },
            { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            { x => x.JobCardId, JobCardId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditTaskDialog>("Edit Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO updatedTask)
        {
            await GetJobCardTaskAsync();
            await OnTasksUpdated.InvokeAsync(true);
        }
        // Open edit dialog

    }

    private async Task DeleteJobCard(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "ContentText", $"Are you sure you want to delete task '{task.Title}'? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Replace with your actual API endpoint
                var response = await HttpClient.DeleteAsync($"api/JobCardTask/delete/{task.Id}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Task deleted successfully!", Severity.Success);
                    await GetJobCardTaskAsync(); // Refresh the task list
                    await OnTasksUpdated.InvokeAsync(true);
                }
                else
                {
                    Snackbar.Add("Failed to delete task.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting task: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task StartJobCard(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "ContentText", $"Are you sure you want to start task '{task.Title}'?" },
            { "ButtonText", "Start" },
            { "Color", Color.Success }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Task Start", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Replace with your actual API endpoint
                var response = await HttpClient.PutAsJsonAsync($"api/JobCardTask/startTask", task.Id);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Task started successfully!", Severity.Success);
                    await GetJobCardTaskAsync(); // Refresh the task list
                    await OnTasksUpdated.InvokeAsync(true);
                }
                else
                {
                    Snackbar.Add("Failed to start task.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error starting task: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task CompleteTask(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "ContentText", $"Are you sure you want to complete task '{task.Title}'?" },
            { "ButtonText", "Mark As Completed" },
            { "Color", Color.Success }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Task Completion", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Replace with your actual API endpoint
                var response = await HttpClient.PutAsJsonAsync($"api/JobCardTask/completeTask", task.Id);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Task mark as completed successfully!", Severity.Success);
                    await GetJobCardTaskAsync(); // Refresh the task list
                    await OnTasksUpdated.InvokeAsync(true);
                }
                else
                {
                    Snackbar.Add("Failed to complete task.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error completing task: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ViewImages(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<ManageTaskImageDialog>
        {
            // { x => x.IsEdit, true },
             { x => x.IsViewOnly, false },
             { x => x.JobCardTaskId, task.Id },
            // { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            // { x => x.JobCardId, JobCardId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<ManageTaskImageDialog>("Manage Task Images", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO viewTask)
        {

        }
    }

    private async Task ViewComments(JobCardTaskSummaryDTO task)
    {
        var parameters = new DialogParameters<TaskCommentDialog>
        {
            // { x => x.IsEdit, true },
             { x => x.IsViewOnly, false },
             { x => x.JobCardTaskId, task.Id },
            // { x => x.Statuses, TaskStatuses.Where(x => x.Id>0).ToList() },
            // { x => x.JobCardId, JobCardId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<TaskCommentDialog>("Task Comments", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is JobCardTaskDTO viewTask)
        {

        }
    }
}
