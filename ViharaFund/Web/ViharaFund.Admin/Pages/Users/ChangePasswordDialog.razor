@using System.Net.Http.Json
@using MudBlazor
@using ViharaFund.Shared.DTOs.User
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="Icons.Material.Filled.Key" Class="mr-3" />
            Change Password
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudText Typo="Typo.body2" Class="mb-4">
            Changing password for user: <strong>@Username</strong>
        </MudText>

        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="newPassword"
                                  Label="New Password"
                                  InputType="@(showPassword? InputType.Text: InputType.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(showPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  Required="true"
                                  RequiredError="Password is required"
                                  Validation="@ValidatePassword"
                                  Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="confirmPassword"
                                  Label="Confirm New Password"
                                  InputType="@(showConfirmPassword? InputType.Text: InputType.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(showConfirmPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                  OnAdornmentClick="ToggleConfirmPasswordVisibility"
                                  Required="true"
                                  RequiredError="Please confirm the password"
                                  Validation="@ValidateConfirmPassword"
                                  Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>

            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-3">
                Password requirements:
            </MudText>
            <MudList T="string" Dense="true" Class="mt-1">
                <MudListItem Icon="@GetValidationIcon(newPassword.Length >= 8)"
                             IconColor="@GetValidationColor(newPassword.Length >= 8)">
                    <MudText Typo="Typo.caption">At least 8 characters long</MudText>
                </MudListItem>
                <MudListItem Icon="@GetValidationIcon(HasUpperCase(newPassword))"
                             IconColor="@GetValidationColor(HasUpperCase(newPassword))">
                    <MudText Typo="Typo.caption">Contains uppercase letter</MudText>
                </MudListItem>
                <MudListItem Icon="@GetValidationIcon(HasLowerCase(newPassword))"
                             IconColor="@GetValidationColor(HasLowerCase(newPassword))">
                    <MudText Typo="Typo.caption">Contains lowercase letter</MudText>
                </MudListItem>
                <MudListItem Icon="@GetValidationIcon(HasDigit(newPassword))"
                             IconColor="@GetValidationColor(HasDigit(newPassword))">
                    <MudText Typo="Typo.caption">Contains number</MudText>
                </MudListItem>
            </MudList>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="!isValid || isSubmitting">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Changing...</MudText>
            }
            else
            {
                <MudText>Change Password</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public string Username { get; set; } = "";

    private MudForm form = null!;
    private bool isValid;
    private bool isSubmitting;
    private string newPassword = "";
    private string confirmPassword = "";
    private bool showPassword;
    private bool showConfirmPassword;

    private async Task Submit()
    {
        if (!isValid) return;

        try
        {
            isSubmitting = true;

            var passwordChangeRequest = new UpdatePasswordDTO
            {
                UserId = UserId,
                NewPassword = newPassword,
                ConfirmPassword = confirmPassword
            };

            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync($"api/User/update-password", passwordChangeRequest);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Password changed successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Failed to change password. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error changing password: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Password is required";
            yield break;
        }

        if (password.Length < 8)
            yield return "Password must be at least 8 characters long";

        if (!HasUpperCase(password))
            yield return "Password must contain at least one uppercase letter";

        if (!HasLowerCase(password))
            yield return "Password must contain at least one lowercase letter";

        if (!HasDigit(password))
            yield return "Password must contain at least one number";
    }

    private IEnumerable<string> ValidateConfirmPassword(string confirmPass)
    {
        if (confirmPass != newPassword)
            yield return "Passwords do not match";
    }

    private bool HasUpperCase(string password) => password.Any(char.IsUpper);

    private bool HasLowerCase(string password) => password.Any(char.IsLower);

    private bool HasDigit(string password) => password.Any(char.IsDigit);

    private string GetValidationIcon(bool isValid) => isValid ? Icons.Material.Filled.Check : Icons.Material.Filled.Close;

    private Color GetValidationColor(bool isValid) => isValid ? Color.Success : Color.Error;
}