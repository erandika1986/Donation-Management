@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Application.DTOs.User
@inherits MudComponentBase
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(IsEdit? Icons.Material.Filled.Edit : Icons.Material.Filled.PersonAdd)" Class="mr-3" />
            @(IsEdit ? "Edit User" : "Add New User")
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudGrid>
                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudTextField @bind-Value="User.FullName"
                                  Label="Full Name"
                                  Required="true"
                                  RequiredError="Full name is required"
                                  Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudTextField @bind-Value="User.Username"
                                  Label="Username"
                                  Required="true"
                                  RequiredError="Username is required"
                                  Variant="Variant.Outlined"
                                  Disabled="IsEdit" />
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudTextField @bind-Value="User.Email"
                                  Label="Email"
                                  Required="true"                                
                                  RequiredError="Email is required"
                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email format" })"
                                  Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudTextField @bind-Value="User.Phone"
                                  Label="Phone"
                                  Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudSelect T="DropDownDTO" Label="User Role" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" MultiSelection="true" @bind-SelectedValues="SelectedRoles" Required="true" RequiredError="Role is required!">
                        @foreach (var role in Roles)
                        {
                            <MudSelectItem T="DropDownDTO" Value="@role">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudSwitch @bind-Value="User.IsActive"
                               Label="Active"
                               Color="Color.Primary" />
                </MudItem>
                @if (User.Id == 0)
                {
                    <MudItem xs="12" sm="6" md="6" lg="6">
                        <MudTextField T="string"
                                      Label="Password"
                                      InputType="InputType.Password"
                                      @bind-Value="User.Password"
                                      Required="true"
                                      RequiredError="Password is required!"
                                      For="@(() => User.Password)" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="6" lg="6">
                        <MudTextField T="string"
                                      Label="Confirm Password"
                                      InputType="InputType.Password"
                                      @bind-Value="User.ConfirmPassword"
                                      Required="true"
                                      RequiredError="Confirm password is required!"
                                      Validation="@(() => ValidateConfirmPassword())"
                                      For="@(() => User.ConfirmPassword)" />
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="!isValid">
            @(IsEdit ? "Update" : "Create")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public UserDTO User { get; set; } = new();

    private MudForm form = null!;
    private bool isValid;

    private IEnumerable<DropDownDTO> Roles = new HashSet<DropDownDTO>();
    private IEnumerable<DropDownDTO> SelectedRoles = new HashSet<DropDownDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadMasterDataAsync();
    }

    private async Task LoadMasterDataAsync()
    {
        try
        {
            // Load your master data
            Roles = await HttpClient.GetFromJsonAsync<List<DropDownDTO>>("api/User/getAvailableRoles") ?? new();
            if(IsEdit && User != null)
            {
                SelectedRoles = Roles.Where(x => User.AssignedRoles.Contains(x.Id)).ToHashSet();
            }
            else
            {

                //SelectedRole = Roles.FirstOrDefault();
            }


        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading master data: {ex.Message}");
        }
    }

    private string ValidateConfirmPassword()
    {
        if (User.Id != 0)
            return null; // No validation on update

        if (string.IsNullOrWhiteSpace(User.ConfirmPassword))
            return "Confirm password is required!";

        return User.Password == User.ConfirmPassword ? null : "Passwords do not match";
    }

    void Submit()
    {
        if (isValid)
        {
            User.AssignedRoles.Clear();
            User.AssignedRoles.AddRange(SelectedRoles.Select(x => x.Id).ToList());
            MudDialog.Close(DialogResult.Ok(User));
        }
    }

    void Cancel() => MudDialog.Cancel();
}