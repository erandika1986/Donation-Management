@page "/users"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using ViharaFund.Admin.Common
@using ViharaFund.Admin.Helper
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Application.DTOs.User
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize]
<PageTitle>User Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4" Style="padding:4px !important;">
    @if (!_isMasterDataLoaded)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Loading master data...</MudText>
    }
    else
    {
        <!-- Page Header -->
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <div class="d-flex justify-space-between align-center flex-wrap">
                <div>
                    <MudText Typo="Typo.h4" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" />
                        System User Management
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Manage system user
                    </MudText>
                </div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenAddUserDialog"
                           Class="mt-2 mt-sm-0">
                    New User
                </MudButton>
            </div>
        </MudPaper>

        <!-- Filters Section -->
        <MudPaper Class="pa-4 mb-4" Elevation="1">
            <MudGrid AlignItems="Center">
                <!-- Search -->
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudTextField @bind-Value="searchString"
                                  Label="Search"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Placeholder="Search by user name, email or phone..."
                                  Immediate="true"
                                  DebounceInterval="300"
                                  OnDebounceIntervalElapsed="OnSearch" />
                </MudItem>

                <!-- Category Filter -->
                <MudItem xs="12" sm="6" md="3" lg="2">
                    <MudSelect T="DropDownDTO" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" Label="User Role" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedRole" ValueChanged="@RoleChanged">
                        @foreach (var role in Roles)
                        {
                            <MudSelectItem T="DropDownDTO" Value="@role">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Actions -->
                <MudItem xs="12" sm="6" md="12" lg="7" Class="d-flex justify-end">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small" Class="d-flex justify-content-end">
                        @*                      <MudButton StartIcon="@Icons.Material.Filled.FilterAlt"
                                   OnClick="FilterJobCards"
                                   Color="Color.Primary">
                            Filter
                        </MudButton> *@
                        <MudButton StartIcon="@Icons.Material.Filled.Clear"
                                   OnClick="ClearFilters"
                                   Color="Color.Secondary">
                            Clear
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="RefreshData"
                                   Color="Color.Default">
                            Refresh
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudPaper Class="pa-0" Elevation="1">
            <!-- Data Table -->
            <MudDataGrid @ref="_dataGrid"
                         T="UserDTO"
                         ServerData="@(LoadData)" Sortable="true"
                         Filterable="false"
                         Hideable="true"
                         Hover="true"
                         Striped="true"
                         Elevation="25"
                         Loading="@_loading">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mr-4">Donations</MudText>
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">
                        Total: @TotalRecords items
                    </MudText>
                </ToolBarContent>

                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="ID" />

                    <PropertyColumn Property="x => x.FullName" Title="Full Name" />

                    <PropertyColumn Property="x => x.Username" Title="Username" />

                    <PropertyColumn Property="x => x.Email" Title="Email" />

                    <PropertyColumn Property="x => x.Phone" Title="Phone" />

                    <PropertyColumn Property="x => x.AssignRoles" Title="Roles" />

                    <TemplateColumn Title="Status" Sortable="false">
                        <CellTemplate>
                            <MudChip Color="@(context.Item.IsActive? Color.Success: Color.Error)"
                                     Size="Size.Small"
                                     Variant="Variant.Filled">
                                @(context.Item.IsActive ? "Active" : "Inactive")
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>

                    @*                     <TemplateColumn Title="Created On" Sortable="true" SortBy="@(x => x.CreatedOn)">
                        <CellTemplate>
                            <MudText Typo="Typo.caption">
                                @context.Item.CreatedOn.ToString("MMM dd, yyyy")
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn> *@
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate Context="user">
                            <MudStack Row>
                                <MudTooltip Text="View User" Color="Color.Info" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                                   Color="Color.Info"
                                                   Variant="Variant.Filled"
                                                   Title="View Details"
                                                   OnClick="@(() => ViewUserDetails(user.Item))" />
                                </MudTooltip>
                                <MudTooltip Text="Edit User" Color="Color.Success" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Success"
                                                   Variant="Variant.Filled"
                                                   Title="Edit User"
                                                   OnClick="@(() => EditUser(user.Item))" />
                                </MudTooltip>
                                <MudTooltip Text="Update User Password" Color="Color.Warning" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Key"
                                                   Color="Color.Warning"
                                                   Variant="Variant.Filled"
                                                   Title="Change Password"
                                                   OnClick="@(() => ChangePassword(user.Item))" />
                                </MudTooltip>
                                <MudTooltip Text="Delete User" Color="Color.Error" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Variant="Variant.Filled"
                                                   Title="Delete User"
                                                   OnClick="@(() => DeleteUser(user.Item))" />
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>

                    @*                     <TemplateColumn Title="Actions" Sortable="false" Filterable="false">
                        <CellTemplate>
                            <MudStack Row Spacing="1">
                                <MudIconButton Icon="Icons.Material.Filled.Visibility"
                                               Color="Color.Info"
                                               Size="Size.Small"
                                               Title="View Details"
                                               OnClick="@(() => ViewUserDetails(context.Item))" />

                                <MudIconButton Icon="Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               Title="Edit User"
                                               OnClick="@(() => EditUser(context.Item))" />

                                <MudIconButton Icon="Icons.Material.Filled.Key"
                                               Color="Color.Warning"
                                               Size="Size.Small"
                                               Title="Change Password"
                                               OnClick="@(() => ChangePassword(context.Item))" />

                                <MudIconButton Icon="Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               Title="Delete User"
                                               OnClick="@(() => DeleteUser(context.Item))" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn> *@
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="UserDTO" />
                </PagerContent>
            </MudDataGrid>
        </MudPaper>

    }
</MudContainer>

@code {
    private List<UserDTO> users = new();
    private List<UserDTO> filteredUsers = new();
    private bool _loading = false;
    private bool _isMasterDataLoaded = false;
    private string searchString = "";
    private string statusFilter = "All";

    private IEnumerable<DropDownDTO> Roles = new List<DropDownDTO>();
    private DropDownDTO SelectedRole= new DropDownDTO();

    private MudDataGrid<UserDTO> _dataGrid;
    private int TotalRecords = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadMasterDataAsync();
    }

    private async Task LoadMasterDataAsync()
    {
        try
        {
            // Load your master data
            Roles = await HttpClient.GetFromJsonAsync<List<DropDownDTO>>("api/User/getAvailableRoles") ?? new();
            SelectedRole = Roles.FirstOrDefault();

            _isMasterDataLoaded = true;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading master data: {ex.Message}");
        }
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return _dataGrid.ReloadServerData();
    }

    private void RoleChanged(DropDownDTO changedValue)
    {
        SelectedRole = changedValue;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private async Task<GridData<UserDTO>> LoadData(GridState<UserDTO> state)
    {
        try
        {
            _loading = true;

            // Extract paging parameters
            var page = state.Page + 1; // MudBlazor uses 0-based indexing
            var pageSize = state.PageSize;

            // Extract sorting parameters
            var sortBy = state.SortDefinitions.FirstOrDefault()?.SortBy;
            var sortDirection = state.SortDefinitions.FirstOrDefault()?.Descending == true ? false : true;

            var parameters = new UserFilterDTO
            {
                CurrentPage = page,
                PageSize = pageSize,
                SearchTerm = searchString,
                RoleId = SelectedRole.Id
            };

            var queryString = QueryStringHelper.ToQueryString(parameters);
            var url = $"api/user/getAll?{queryString}";

            var response = await HttpClient.GetFromJsonAsync<PaginatedResultDTO<UserDTO>>(url) ?? new();
            TotalRecords = response.TotalItems;
            // Return the result in GridData format
            return new GridData<UserDTO>
            {
                Items = response.Items,
                TotalItems = response.TotalItems
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddUserDialog()
    {
        var parameters = new DialogParameters<AddEditUserDialog>
        {
            { x => x.IsEdit, false },
            { x => x.User, new UserDTO() }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditUserDialog>("Add New User", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is UserDTO newUser)
        {
            await CreateUser(newUser);
        }
    }

    private async Task EditUser(UserDTO user)
    {
        var parameters = new DialogParameters<AddEditUserDialog>
        {
            { x => x.IsEdit, true },
            { x => x.User, new UserDTO
                {
                    Id = user.Id,
                    Username = user.Username,
                    Email = user.Email,
                    Phone = user.Phone,
                    FullName = user.FullName,
                    AssignRoles = user.AssignRoles,
                    IsActive = user.IsActive,
                    AssignedRoles = new List<int>(user.AssignedRoles)
                }
            }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<AddEditUserDialog>("Edit User", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is UserDTO updatedUser)
        {
            await UpdateUser(updatedUser);
        }
    }

    private async Task ViewUserDetails(UserDTO user)
    {
        var parameters = new DialogParameters<UserDetailsDialog>
        {
            { x => x.User, user }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        await DialogService.ShowAsync<UserDetailsDialog>("User Details", parameters, options);
    }

    private async Task ChangePassword(UserDTO user)
    {
        var parameters = new DialogParameters<ChangePasswordDialog>
        {
            { x => x.UserId, user.Id },
            { x => x.Username, user.Username }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<ChangePasswordDialog>("Change Password", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Password changed successfully!", Severity.Success);
        }
    }

    private async Task DeleteUser(UserDTO user)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "ContentText", $"Are you sure you want to delete user '{user.FullName}'? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Replace with your actual API endpoint
                var response = await HttpClient.DeleteAsync($"api/User/delete/{user.Id}");

                if (response.IsSuccessStatusCode)
                {
                    _dataGrid?.ReloadServerData();
                    StateHasChanged();
                    Snackbar.Add("User deleted successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to delete user.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting user: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task CreateUser(UserDTO user)
    {
        try
        {
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/User/create", user);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                    _dataGrid?.ReloadServerData();
                    StateHasChanged();
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create user.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating user: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateUser(UserDTO user)
    {
        try
        {
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/User/update", user);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                    _dataGrid?.ReloadServerData();
                    StateHasChanged();
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create user.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating user: {ex.Message}", Severity.Error);
        }
    }

    private void ClearFilters()
    {
        // SelectedPriority = Priorities.FirstOrDefault() ?? new DropDownDTO();
        // SelectedStatus = Statuses.FirstOrDefault() ?? new DropDownDTO();

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }


    private async Task RefreshData()
    {
        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }
}