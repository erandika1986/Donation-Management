@page "/donors"
@using ViharaFund.Admin.Common
@using ViharaFund.Admin.Helper
@using ViharaFund.Application.DTOs.Common
@using ViharaFund.Application.DTOs.Donor

@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4" Style="padding:4px !important;">
    @if (!_isMasterDataLoaded)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Loading master data...</MudText>
    }
    else
    {
        <!-- Page Header -->
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <div class="d-flex justify-space-between align-center flex-wrap">
                <div>
                    <MudText Typo="Typo.h4" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.VolunteerActivism" Class="mr-3" />
                        Donor Management
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Manage and track donors and donation history
                    </MudText>
                </div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenAddDonorDialog"
                           Class="mt-2 mt-sm-0">
                    New Donor
                </MudButton>
            </div>
        </MudPaper>

        <!-- Filters Section -->
        <MudPaper Class="pa-4 mb-4" Elevation="1">
            <MudGrid AlignItems="Center">
                <!-- Search -->
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudTextField @bind-Value="searchString"
                                  Label="Search"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Placeholder="Search by donor name, email or phone..."
                                  Immediate="true"
                                  DebounceInterval="300"
                                  OnDebounceIntervalElapsed="OnSearch" />
                </MudItem>

                <!-- Actions -->
                <MudItem xs="12" sm="6" md="12" lg="9" Class="d-flex justify-end">
                    <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small" Class="d-flex justify-content-end">
                        @*                      <MudButton StartIcon="@Icons.Material.Filled.FilterAlt"
                                   OnClick="FilterJobCards"
                                   Color="Color.Primary">
                            Filter
                        </MudButton> *@
                        <MudButton StartIcon="@Icons.Material.Filled.Clear"
                                   OnClick="ClearFilters"
                                   Color="Color.Secondary">
                            Clear
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="RefreshData"
                                   Color="Color.Default">
                            Refresh
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudPaper Class="pa-0" Elevation="1">
            <!-- Data Table -->
            <MudDataGrid @ref="_dataGrid"
                         T="DonorDTO"
                         ServerData="@(LoadData)" Sortable="true"
                         Filterable="false"
                         Hideable="true"
                         Hover="true"
                         Striped="true"
                         Elevation="25"
                         Loading="@_loading">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mr-4">Donors</MudText>
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">
                        Total: @TotalRecords items
                    </MudText>
                </ToolBarContent>

                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="ID" />

                    <PropertyColumn Property="x => x.Name" Title="Name" />

                    <PropertyColumn Property="x => x.Email" Title="Email" />

                    <PropertyColumn Property="x => x.Phone" Title="Phone" />

                    <PropertyColumn Property="x => x.Address" Title="Address" />



                    <TemplateColumn Title="Created On" Sortable="true" SortBy="@(x => x.CreatedOn)">
                        <CellTemplate>
                            <MudText Typo="Typo.caption">
                                @context.Item.CreatedOn.ToString("MMM dd, yyyy")
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate Context="user">
                            <MudStack Row>
                                <MudTooltip Text="View User" Color="Color.Info" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                                   Color="Color.Info"
                                                   Variant="Variant.Filled"
                                                   Title="View Details"
                                                   OnClick="@(() => ViewUserDetails(user.Item))" />
                                </MudTooltip>
                                <MudTooltip Text="Edit User" Color="Color.Success" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Success"
                                                   Variant="Variant.Filled"
                                                   Title="Edit User"
                                                   OnClick="@(() => EditDonor(user.Item))" />
                                </MudTooltip>
                                <MudTooltip Text="Delete User" Color="Color.Error" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Variant="Variant.Filled"
                                                   Title="Delete User"
                                                   OnClick="@(() => DeleteDonor(user.Item))" />
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="DonorDTO" />
                </PagerContent>
            </MudDataGrid>

        </MudPaper>
    }
</MudContainer>


@code {
    private List<DonorDTO> donors = new();
    private bool _loading = false;
    private bool _isMasterDataLoaded = false;
    private string searchString = "";
    //private string statusFilter = "All";

    private int TotalRecords = 0;
    private MudDataGrid<DonorDTO> _dataGrid;

    protected override async Task OnInitializedAsync()
    {
        _isMasterDataLoaded = true;
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return _dataGrid.ReloadServerData();
    }

    private async Task<GridData<DonorDTO>> LoadData(GridState<DonorDTO> state)
    {
        try
        {
            _loading = true;

            // Extract paging parameters
            var page = state.Page + 1; // MudBlazor uses 0-based indexing
            var pageSize = state.PageSize;

            // Extract sorting parameters
            var sortBy = state.SortDefinitions.FirstOrDefault()?.SortBy;
            var sortDirection = state.SortDefinitions.FirstOrDefault()?.Descending == true ? false : true;

            var parameters = new DonorFilterDTO
            {
                CurrentPage = page,
                PageSize = pageSize,
                SearchTerm = searchString
            };

            var queryString = QueryStringHelper.ToQueryString(parameters);
            var url = $"api/Donor/getAll?{queryString}";

            var response = await HttpClient.GetFromJsonAsync<PaginatedResultDTO<DonorDTO>>(url) ?? new();
            TotalRecords = response.TotalItems;

            // Return the result in GridData format
            return new GridData<DonorDTO>
            {
                Items = response.Items,
                TotalItems = response.TotalItems
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddDonorDialog()
    {
        var parameters = new DialogParameters<AddEditDonor>
        {
            { x => x.IsEdit, false },
            { x => x.Donor, new DonorDTO() }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditDonor>("Add New User", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is DonorDTO doner)
        {
            await SaveDonor(doner);
        }
    }

    private async Task EditDonor(DonorDTO donor)
    {
        var parameters = new DialogParameters<AddEditDonor>
        {
            { x => x.IsEdit, true },
            { x => x.Donor, new DonorDTO
                {
                    Id = donor.Id,
                    Name = donor.Name,
                    Email = donor.Email,
                    Phone = donor.Phone,
                    Address = donor.Address,
                    RequestedAsUnknownDonor = donor.RequestedAsUnknownDonor
                }
            }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<AddEditDonor>("Edit Donor", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is DonorDTO updateDonor)
        {
            await SaveDonor(updateDonor);
        }
    }

    private async Task ViewUserDetails(DonorDTO donor)
    {
        var parameters = new DialogParameters<AddEditDonor>
        {
            { x => x.Donor, donor }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        await DialogService.ShowAsync<DonorDetail>("Donor Details", parameters, options);
    }

    private async Task DeleteDonor(DonorDTO donor)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "ContentText", $"Are you sure you want to delete user '{donor.Name}'? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Replace with your actual API endpoint
                var response = await HttpClient.DeleteAsync($"api/Donor/delete/{donor.Id}");

                if (response.IsSuccessStatusCode)
                {
                    _dataGrid?.ReloadServerData();
                    StateHasChanged();
                    Snackbar.Add("Donor deleted successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to delete Donor.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting donor: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task SaveDonor(DonorDTO donor)
    {
        try
        {
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/Donor/save", donor);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                    _dataGrid?.ReloadServerData();
                    StateHasChanged();
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to create Donor.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating donor: {ex.Message}", Severity.Error);
        }
    }

    private void ClearFilters()
    {
        // SelectedPriority = Priorities.FirstOrDefault() ?? new DropDownDTO();
        // SelectedStatus = Statuses.FirstOrDefault() ?? new DropDownDTO();

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }


    private async Task RefreshData()
    {
        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }
}
