@page "/setting"

@using ViharaFund.Admin.Common
@using ViharaFund.Admin.Infrastructure
@using ViharaFund.Shared.DTOs.CompanySettings
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Organization Details" Icon="@Icons.Material.Filled.Home">
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-2">
                    <MudForm @ref="formCompanyDetail" @bind-IsValid="@companyDetailSuccess" @bind-Errors="@companyDetailErrors">
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="Company Name" @bind-Value="CompanyDetail.CompanyName" Required="true" RequiredError="Organization name is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="Company Address" @bind-Value="CompanyDetail.CompanyAddress" Required="true" RequiredError="Organization address is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="Company Logo Url" @bind-Value="CompanyDetail.CompanyLogoUrl" Required="true" RequiredError="Organization Logo Url is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="Application Url" @bind-Value="CompanyDetail.ApplicationUrl" Required="true" RequiredError="Application Url is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="Default User Image Url" @bind-Value="CompanyDetail.DefaultUserProfileImageUrl" Required="true" RequiredError="Leave Request CC is required!" />
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudPaper>
                <MudPaper Class="pa-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCompanyDetail" Disabled="@(!companyDetailSuccess)" Class="ml-auto">Save</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Email Settings" Icon="@Icons.Material.Filled.Settings">
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-2">
                    <MudForm @ref="formSmtpSetting" @bind-IsValid="@smtpSettingsuccess" @bind-Errors="@smtpSettingErrors">
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="SMTP Server" @bind-Value="CompanySMTPSetting.SMTPServer" Required="true" RequiredError="SMTP server is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="SMTP Username" @bind-Value="CompanySMTPSetting.SMTPUsername" Required="true" RequiredError="SMTP username is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="SMTP Password" @bind-Value="CompanySMTPSetting.SMTPPassword" Required="true" RequiredError="SMTP password is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="SMTP Port" @bind-Value="CompanySMTPSetting.SMTPPort" Required="true" RequiredError="SMTP port is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="SMTP Enable Ssl" @bind-Value="CompanySMTPSetting.SMTPEnableSsl" Required="true" RequiredError="SMTP enable SSL Value is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="SMTP Sender Email" @bind-Value="CompanySMTPSetting.SMTPSenderEmail" Required="true" RequiredError="SMTP sender emai is required!" />
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudPaper>
                <MudPaper Class="pa-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveSMTPDetail" Disabled="@(!smtpSettingsuccess)" Class="ml-auto">Save</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    bool companyDetailSuccess;
    string[] companyDetailErrors = { };
    MudForm formCompanyDetail;
    private CompanyDetailDTO CompanyDetail { get; set; } = new();

    bool smtpSettingsuccess;
    string[] smtpSettingErrors = { };
    MudForm formSmtpSetting;
    private CompanySMTPSettingDTO CompanySMTPSetting { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //LoadingService.Show();
            CompanyDetail = await HttpClient.GetFromJsonAsync<CompanyDetailDTO>("api/AppSetting/get-company-detail") ?? new();
            CompanySMTPSetting = await HttpClient.GetFromJsonAsync<CompanySMTPSettingDTO>("api/AppSetting/get-smtp-setting") ?? new();
        }
        catch(Exception ex)
        {
            
        }
        finally
        {
            //LoadingService.Hide();
        }

    }

    private async Task SaveCompanyDetail()
    {
        try
        {
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/AppSetting/save-company-detail", CompanyDetail);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to save company settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating user: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveSMTPDetail()
    {
        try
        {
            // Replace with your actual API endpoint
            var response = await HttpClient.PostAsJsonAsync("api/AppSetting/save-smtp-setting", CompanySMTPSetting);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();
                if (result is not null && result.Succeeded)
                {
                    Snackbar.Add(result.SuccessMessage, Severity.Success);
                }
                else if (result is not null && !result.Succeeded)
                {
                    Snackbar.Add(string.Join(",", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Failed to save company SMTP settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating user: {ex.Message}", Severity.Error);
        }
    }
}
